diff --git a/.github/workflows/android-build-custom-dev-app.yml b/.github/workflows/android-build-custom-dev-app.yml
index 35c7726..4fcffda 100644
--- a/.github/workflows/android-build-custom-dev-app.yml
+++ b/.github/workflows/android-build-custom-dev-app.yml
@@ -1,8 +1,10 @@
-name: Android Custom Dev App CI
+name: '[Android] Custom Dev App CI'
 
 on:
+  schedule: 
+    - cron: '0 0 * * *'
   pull_request:
-    branches: [ master ]
+    branches: [master, release/*]
 
 jobs:     
   build:
diff --git a/.github/workflows/ios-build-custom-dev-app.yml b/.github/workflows/ios-build-custom-dev-app.yml
index 790245d..5717a36 100644
--- a/.github/workflows/ios-build-custom-dev-app.yml
+++ b/.github/workflows/ios-build-custom-dev-app.yml
@@ -1,8 +1,10 @@
-name: IOS Custom Dev App CI
+name: '[iOS] Custom Dev App CI'
 
 on:
+  schedule: 
+    - cron: '0 0 * * *'
   pull_request:
-    branches: [master]
+    branches: [master, release/*]
 
 jobs:
   build:
diff --git a/.github/workflows/windows-test-npm-installation.yml b/.github/workflows/windows-test-npm-installation.yml
new file mode 100644
index 0000000..a3760cd
--- /dev/null
+++ b/.github/workflows/windows-test-npm-installation.yml
@@ -0,0 +1,19 @@
+name: '[Windows] Test npm installation'
+
+on:
+  schedule: 
+    - cron: '0 0 * * *'
+  pull_request:
+    branches: [master, release/*]
+
+jobs:
+  build:
+    runs-on: windows-latest
+
+    steps:
+      - uses: actions/checkout@v2
+      - uses: actions/setup-node@v2
+        with:
+          node-version: '14'
+          architecture: 'x64'
+      - run: npm install
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index a6a890c..c006c72 100644
--- a/.gitignore
+++ b/.gitignore
@@ -35,6 +35,7 @@ local.properties
 # iOS
 # 
 ios/Pods/
+ios/MendixAppDelegate.m
 
 # node.js
 #
diff --git a/android/app/build.gradle b/android/app/build.gradle
index a824ec9..54c3058 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -100,17 +100,10 @@ project.ext.vectoricons = [
 dependencies {
     implementation project(':react-native-splash-screen')
     implementation project(':react-native-code-push')
-    implementation project(":react-native-firebase")
     implementation project(":mendixnative-release")
     implementation fileTree(dir: "libs", include: ["*.jar"])
     implementation "com.facebook.react:react-native:+"  // From node_modules
     implementation "org.webkit:android-jsc:r245459"
-    if (googleServicesEnabled) {
-        implementation "com.google.android.gms:play-services-base:${project.playServicesVersion}"
-        implementation "com.google.firebase:firebase-core:17.2.3"
-        implementation "com.google.firebase:firebase-messaging:20.1.2"
-        implementation 'me.leolin:ShortcutBadger:1.1.22@aar'
-    }
     devImplementation "androidx.constraintlayout:constraintlayout:2.0.0-beta2"
     devImplementation "me.dm7.barcodescanner:zxing:1.9.13"
 
@@ -135,11 +128,14 @@ task copyDownloadableDepsToLibs(type: Copy) {
     into "libs"
 }
 
+apply from: file("../mendixnative-release/mendix.gradle"); applyMendixGradle(project)
 apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)
 apply from: "../../node_modules/react-native-vector-icons/fonts.gradle"
-if (googleServicesEnabled) {
-    apply plugin: "com.google.gms.google-services"
+
+// Disable till dependencies are ironed out
+try {
     com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
+} catch (e) {
 }
 
 boolean hasGoogleServicesSupport() {
diff --git a/android/app/src/appstore/java/com/mendix/nativetemplate/MainActivity.java b/android/app/src/appstore/java/com/mendix/nativetemplate/MainActivity.java
index fa5d085..7fb178c 100644
--- a/android/app/src/appstore/java/com/mendix/nativetemplate/MainActivity.java
+++ b/android/app/src/appstore/java/com/mendix/nativetemplate/MainActivity.java
@@ -12,6 +12,7 @@ import com.mendix.mendixnative.react.MxConfiguration;
 public class MainActivity extends MendixReactActivity {
     @Override
     protected void onCreate(@Nullable Bundle savedInstanceState) {
+        this.getLifecycle().addObserver(new MendixActivityObserver(this));
         Boolean hasDeveloperSupport = ((MainApplication) getApplication()).getUseDeveloperSupport();
         mendixApp = new MendixApp(AppUrl.getUrlFromResource(this), MxConfiguration.WarningsFilter.none, hasDeveloperSupport);
         super.onCreate(savedInstanceState);
diff --git a/android/app/src/dev/AndroidManifest.xml b/android/app/src/dev/AndroidManifest.xml
index 074b971..be7074e 100644
--- a/android/app/src/dev/AndroidManifest.xml
+++ b/android/app/src/dev/AndroidManifest.xml
@@ -15,6 +15,6 @@
             android:name="com.mendix.mendixnative.activity.MendixReactActivity"
             android:configChanges="keyboard|keyboardHidden|orientation|screenSize|uiMode"
             android:launchMode="singleTop"
-            android:windowSoftInputMode="adjustResize"></activity>
+            android:windowSoftInputMode="adjustPan"></activity>
     </application>
 </manifest>
diff --git a/android/app/src/dev/java/com/mendix/nativetemplate/MainActivity.java b/android/app/src/dev/java/com/mendix/nativetemplate/MainActivity.java
index e3d7c97..8de4544 100644
--- a/android/app/src/dev/java/com/mendix/nativetemplate/MainActivity.java
+++ b/android/app/src/dev/java/com/mendix/nativetemplate/MainActivity.java
@@ -74,6 +74,16 @@ public class MainActivity extends AppCompatActivity implements ZXingScannerView.
 
         appUrl.setText(appPreferences.getAppUrl());
         devModeCheckBox.setChecked(appPreferences.isDevModeEnabled());
+
+        if (getIntent().getData() != null && getIntent().getAction() != null) {
+            this.launchApp(appPreferences.getAppUrl(), getIntent());
+        }
+    }
+
+    @Override
+    protected void onNewIntent(Intent intent) {
+        super.onNewIntent(intent);
+        this.launchApp(appPreferences.getAppUrl(), intent);
     }
 
     @RequiresApi(api = Build.VERSION_CODES.M)
@@ -95,7 +105,7 @@ public class MainActivity extends AppCompatActivity implements ZXingScannerView.
         try {
             JSONObject json = new JSONObject(rawResult.getText());
             String url = json.getString("url");
-            launchApp(url);
+            launchApp(url, null);
         } catch (JSONException e) {
             Toast.makeText(MainActivity.this, R.string.qr_code_invalid, Toast.LENGTH_LONG).show();
         }
@@ -115,11 +125,11 @@ public class MainActivity extends AppCompatActivity implements ZXingScannerView.
         loaderView.setOnTouchListener((view, event) -> true);
 
         appUrl.setOnEditorActionListener((view, actionId, keyEvent) -> {
-            launchApp(appUrl.getText().toString());
+            launchApp(appUrl.getText().toString(), null);
             return false;
         });
 
-        launchAppButton.setOnClickListener((view) -> launchApp(appUrl.getText().toString()));
+        launchAppButton.setOnClickListener((view) -> launchApp(appUrl.getText().toString(), null));
     }
 
     private void isPackagerRunning(String appUrl, Consumer<Boolean> result) {
@@ -173,7 +183,7 @@ public class MainActivity extends AppCompatActivity implements ZXingScannerView.
         }
     }
 
-    private void launchApp(String url) {
+    private void launchApp(String url, Intent passedIntent) {
         disableUIInteraction(true);
         isPackagerRunning(url, (res) -> {
             if (!res) {
@@ -188,6 +198,17 @@ public class MainActivity extends AppCompatActivity implements ZXingScannerView.
             MendixApp mendixApp = new MendixApp(AppUrl.forRuntime(url), warningsFilter, devModeEnabled);
             intent.putExtra(MendixReactActivity.MENDIX_APP_INTENT_KEY, mendixApp);
             intent.putExtra(MendixReactActivity.CLEAR_DATA, clearData);
+
+            if (passedIntent != null) {
+                if (passedIntent.getData() != null) {
+                    intent.setData(passedIntent.getData());
+                }
+
+                if (passedIntent.getAction() != null) {
+                    intent.setAction(passedIntent.getAction());
+                }
+            }
+
             startActivity(intent);
             disableUIInteraction(false);
         });
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
index b4095ba..a1efd74 100644
--- a/android/app/src/main/AndroidManifest.xml
+++ b/android/app/src/main/AndroidManifest.xml
@@ -28,13 +28,14 @@
       android:roundIcon="@mipmap/ic_launcher_round"
       android:allowBackup="false"
       android:largeHeap="true"
-      android:theme="@style/AppTheme">
+      android:theme="@style/AppTheme"
+      android:requestLegacyExternalStorage="true">
       <activity
         android:name="com.mendix.nativetemplate.MainActivity"
         android:label="@string/app_name"
         android:screenOrientation="portrait"
         android:configChanges="keyboard|keyboardHidden|orientation|screenSize|uiMode"
-        android:windowSoftInputMode="adjustResize">
+        android:windowSoftInputMode="adjustPan">
         <intent-filter>
             <action android:name="android.intent.action.MAIN" />
             <category android:name="android.intent.category.LAUNCHER" />
diff --git a/android/app/src/main/java/com/mendix/nativetemplate/MainApplication.java b/android/app/src/main/java/com/mendix/nativetemplate/MainApplication.java
index 819ef6b..b8ac880 100644
--- a/android/app/src/main/java/com/mendix/nativetemplate/MainApplication.java
+++ b/android/app/src/main/java/com/mendix/nativetemplate/MainApplication.java
@@ -12,13 +12,8 @@ import com.microsoft.codepush.react.CodePush;
 
 import org.devio.rn.splashscreen.SplashScreen;
 
-import java.util.Arrays;
 import java.util.List;
 
-import io.invertase.firebase.RNFirebasePackage;
-import io.invertase.firebase.messaging.RNFirebaseMessagingPackage;
-import io.invertase.firebase.notifications.RNFirebaseNotificationsPackage;
-
 public class MainApplication extends MendixReactApplication {
     @Override
     public boolean getUseDeveloperSupport() {
@@ -28,19 +23,12 @@ public class MainApplication extends MendixReactApplication {
     @Override
     public List<ReactPackage> getPackages() {
         List<ReactPackage> packages = new PackageList(this).getPackages();
+        packages.addAll(new MendixPackageList(this).getPackages());
 
         // Packages that cannot be autolinked yet can be added manually here, for example:
         // packages.add(new MyReactNativePackage());
         packages.add(new CodePush(getCodePushKey(), getApplicationContext(), BuildConfig.DEBUG));
 
-        if (BuildConfig.USE_FIREBASE) {
-            packages.addAll(Arrays.asList(
-                    new RNFirebaseMessagingPackage(),
-                    new RNFirebaseNotificationsPackage(),
-                    new RNFirebasePackage()
-            ));
-        }
-
         return packages;
     }
 
diff --git a/android/build.gradle b/android/build.gradle
index 2260a7f..e196fae 100644
--- a/android/build.gradle
+++ b/android/build.gradle
@@ -20,7 +20,7 @@ buildscript {
     dependencies {
         classpath "com.android.tools.build:gradle:3.4.2"
         classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
-        classpath "com.google.gms:google-services:4.2.0"
+        apply from: file("./mendixnative-release/mendix.gradle"); applyMendixClassPaths(project)
 
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
diff --git a/android/mendixnative-release/mendix.gradle b/android/mendixnative-release/mendix.gradle
new file mode 100644
index 0000000..ee91851
--- /dev/null
+++ b/android/mendixnative-release/mendix.gradle
@@ -0,0 +1,438 @@
+import groovy.json.JsonSlurper
+
+def LOG_PREFIX = ":Mendix: "
+
+def rootDir = buildscript.sourceFile.toString().split("android(/|\\\\)mendixnative-release")[0]
+def cliBinPath = "${rootDir}/node_modules/.bin/react-native${System.properties['os.name'].toLowerCase().contains('windows') ? ".cmd" : ""}"
+
+def generatedFilePackage = "com.mendix.nativetemplate"
+def mainActivityObserverFileName = "MendixActivityObserver.java"
+def mainActivityObserverTemplate = """package $generatedFilePackage;
+
+import android.content.Context;
+
+import androidx.lifecycle.Lifecycle;
+import androidx.lifecycle.LifecycleObserver;
+import androidx.lifecycle.OnLifecycleEvent;
+{{imports}}
+
+public class MendixActivityObserver implements LifecycleObserver {
+    private final Context context;
+
+    public MendixActivityObserver(Context activity) {
+        this.context = activity;
+    }
+
+    @OnLifecycleEvent(Lifecycle.Event.ON_CREATE)
+    void onCreate() {
+        {{onCreate}}
+    }
+
+    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)
+    void onResume() {
+        {{onResume}}
+    }
+
+    @OnLifecycleEvent(Lifecycle.Event.ON_START)
+    void onStart() {
+      {{onStart}}
+    }
+
+    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)
+    void onPause() {
+        {{onPause}}
+    }
+
+    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)
+    void onStop() {
+        {{onStop}}
+    }
+
+    @OnLifecycleEvent(Lifecycle.Event.ON_DESTROY)
+    void onDestroy() {
+        {{onDestroy}}
+    }
+}
+"""
+def mendixPackageListFileName = "MendixPackageList.java"
+def mendixPackageListTemplate = """package $generatedFilePackage;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.res.Resources;
+
+import com.facebook.react.ReactPackage;
+import com.facebook.react.shell.MainPackageConfig;
+import com.facebook.react.shell.MainReactPackage;
+import java.util.Arrays;
+import java.util.ArrayList;
+
+{{imports}}
+
+public class MendixPackageList {
+  private Application application;
+  
+  public MendixPackageList(Application application) {
+    this.application = application;
+  }
+
+  private Resources getResources() {
+    return this.getApplication().getResources();
+  }
+
+  private Application getApplication() {
+    return this.application;
+  }
+
+  private Context getApplicationContext() {
+    return this.getApplication().getApplicationContext();
+  }
+
+  public ArrayList<ReactPackage> getPackages() {
+    return new ArrayList<>(Arrays.<ReactPackage>asList(
+      {{packageClassInstances}}
+    ));
+  }
+}
+"""
+
+class MendixModules {
+    private static String LINE_ENDING_CHAR = "\n"
+
+    private String cliBinPath
+    private String rootDir
+    private String logPrefix
+    private Logger logger
+    private ArrayList<HashMap<String, String>> reactNativeModules
+    private Map dependenciesConfig = [:]
+    private File capabilitiesConfigFile
+    private File projectCapabilitiesFile
+    private File nodeModulesDependenciesConfigFile
+
+    MendixModules(File capabilitiesConfigFile, File nodeModulesDependenciesConfigFile, File projectCapabilitiesFile, String cliBinPath, String rootDir, Logger logger, String logPrefix) {
+        this.logger = logger
+        this.rootDir = rootDir
+        this.cliBinPath = cliBinPath
+        this.logPrefix = logPrefix
+        this.capabilitiesConfigFile = capabilitiesConfigFile
+        this.nodeModulesDependenciesConfigFile = nodeModulesDependenciesConfigFile
+        this.projectCapabilitiesFile = projectCapabilitiesFile
+
+        def (nativeModules) = this.getReactNativeConfig()
+        this.reactNativeModules = nativeModules
+        parseDependenciesConfig()
+    }
+
+    void printDependencies() {
+        this.reactNativeModules.each {
+            logDebug(it["name"])
+        }
+    }
+
+    void parseDependenciesConfig() {
+        def dependenciesConfig = [:]
+        def capabilitiesConfig = [:]
+
+        try {
+            capabilitiesConfig = new JsonSlurper().parse(this.capabilitiesConfigFile)
+            def projectCapabilities = new JsonSlurper().parse(this.projectCapabilitiesFile)
+            capabilitiesConfig.retainAll { capabilityConfig ->
+                projectCapabilities.find { enabledCapability ->
+                    enabledCapability.key == capabilityConfig.key && enabledCapability.value == true
+                } && capabilityConfig.value["android"] != null
+            }
+        } catch (ignored) {
+            this.logLifecycle("Failed parsing the capabilities file. Error?")
+        }
+
+        if (this.nodeModulesDependenciesConfigFile.exists()) {
+            try {
+                dependenciesConfig = new JsonSlurper().parse(this.nodeModulesDependenciesConfigFile)
+                (dependenciesConfig as Map).retainAll { dependencyConfig ->
+                    this.reactNativeModules.find { nativeModule ->
+                        nativeModule.get("name") == dependencyConfig.key
+                    } && dependencyConfig.value["android"] != null
+                }
+            } catch (ignored) {
+                this.logLifecycle("Failed parsing the configuration for unlinked node_modules. Error?")
+            }
+        }
+
+        this.dependenciesConfig = capabilitiesConfig + dependenciesConfig
+        printDependencies()
+    }
+
+    void generateMainActivityObserver(File outDir, String fileName, String template) {
+        def activityImports = []
+        def activityOnCreateEntries = []
+        def activityOnStartEntries = []
+        def activityOnResumeEntries = []
+        def activityOnPauseEntries = []
+        def activityOnStopEntries = []
+        def activityOnDestroyEntries = []
+
+        dependenciesConfig.each {
+            def mainActivityDelegateEntry = it.value["android"]["MainActivity"]
+            if (!mainActivityDelegateEntry)
+                return
+
+            def imports = mainActivityDelegateEntry.get("imports")
+            if (imports)
+                activityImports.addAll(imports)
+
+            def onCreateEntries = mainActivityDelegateEntry.get("onCreate")
+            if (onCreateEntries)
+                activityOnCreateEntries.addAll(onCreateEntries)
+
+            def onStartEntries = mainActivityDelegateEntry.get("onStart")
+            if (onStartEntries)
+                activityOnStartEntries.addAll(onStartEntries)
+
+            def onResumeEntries = mainActivityDelegateEntry.get("onResume")
+            if (onResumeEntries)
+                activityOnResumeEntries.addAll(onResumeEntries)
+
+            def onPauseEntries = mainActivityDelegateEntry.get("onPause")
+            if (onPauseEntries)
+                activityOnPauseEntries.addAll(onPauseEntries)
+
+            def onStopEntries = mainActivityDelegateEntry.get("onStop")
+            if (onStopEntries)
+                activityOnStopEntries.addAll(onStopEntries)
+
+            def onDestroyEntries = mainActivityDelegateEntry.get("onDestroy")
+            if (onDestroyEntries)
+                activityOnDestroyEntries.addAll(onDestroyEntries)
+        }
+
+        String CODE_PADDING = "${LINE_ENDING_CHAR}        "
+        String generatedFileContents = template
+                .replace("{{imports}}", activityImports.join(LINE_ENDING_CHAR))
+                .replace("{{onCreate}}", activityOnCreateEntries.join(CODE_PADDING))
+                .replace("{{onStart}}", activityOnStartEntries.join(CODE_PADDING))
+                .replace("{{onResume}}", activityOnResumeEntries.join(CODE_PADDING))
+                .replace("{{onPause}}", activityOnPauseEntries.join(CODE_PADDING))
+                .replace("{{onStop}}", activityOnStopEntries.join(CODE_PADDING))
+                .replace("{{onDestroy}}", activityOnDestroyEntries.join(CODE_PADDING))
+
+        outDir.mkdirs()
+        new FileTreeBuilder(outDir).file(fileName).newWriter().withWriter {
+            w ->
+                w << generatedFileContents
+        }
+    }
+
+    void generateMendixPackageList(File outDir, String fileName, String template) {
+        String CODE_PADDING = "${LINE_ENDING_CHAR}      "
+        def imports = []
+        def entries = []
+        def entrySeparator = "," + CODE_PADDING
+        dependenciesConfig.each {
+            def packageListEntry = it.value["android"]["packageListEntries"]
+            if (packageListEntry) {
+                def importsEntry = packageListEntry["imports"]
+                def packageClassInstances = packageListEntry["packageClassInstances"]
+                if (importsEntry)
+                    imports.addAll(importsEntry)
+                if (packageClassInstances)
+                    entries.addAll(packageClassInstances)
+            }
+        }
+
+        String generatedFileContents = template.replace("{{imports}}", imports.join(CODE_PADDING)).replace("{{packageClassInstances}}", entries.join(entrySeparator))
+
+        outDir.mkdirs()
+        new FileTreeBuilder(outDir).file(fileName).newWriter().withWriter {
+            w ->
+                w << generatedFileContents
+        }
+    }
+
+    void addClassPaths(Project project) {
+        project.buildscript {
+            dependencies {
+                dependenciesConfig.each {
+                    def gradle = (it.value as Object)["android"]["gradle"]
+                    if (!gradle) {
+                        return
+                    }
+                    def customClassPaths = gradle.get("classpaths") as ArrayList<String>
+                    customClassPaths.each { customClassPath ->
+                        this.logLifecycle("Adding classPath ${customClassPath}")
+                        classpath(customClassPath)
+                    }
+                }
+            }
+        }
+    }
+
+    void addExtraDependencies(Project project) {
+        project.dependencies {
+            dependenciesConfig.each {
+                def dependencies = it.value["android"]["externalDependencies"] as ArrayList<String>
+                dependencies.each { dependency ->
+                    this.logLifecycle("Registering extra library ${dependency}")
+                    implementation(dependency)
+                }
+            }
+        }
+    }
+
+    void addAndroidPlugins(Project project) {
+        dependenciesConfig.each {
+            def gradleConfig = it.value["android"]["gradle"]
+            if (!gradleConfig)
+                return
+
+            def dependencies = gradleConfig["plugins"] as ArrayList<String>
+            if (!dependencies)
+                return
+
+            dependencies.each { plugin ->
+                this.logLifecycle("Adding plugin ${plugin}")
+                project.getPluginManager().apply(plugin)
+            }
+        }
+    }
+
+    void logDebug(String message) {
+        this.logger.debug("${this.logPrefix}${message}")
+    }
+
+    void logLifecycle(String message) {
+        this.logger.lifecycle("${this.logPrefix}${message}")
+    }
+
+    void logError(String message) {
+        this.logger.error("${this.logPrefix}${message}")
+    }
+
+    /**
+     * Runs a specified command using Runtime exec() in a specified directory.
+     * Throws when the command result is empty.
+     */
+    String getCommandOutput(String[] command) {
+        try {
+            def output = ""
+            def cmdProcess = Runtime.getRuntime().exec(command)
+            def bufferedReader = new BufferedReader(new InputStreamReader(cmdProcess.getInputStream()))
+            def buff = ""
+            def readBuffer = new StringBuffer()
+            while ((buff = bufferedReader.readLine()) != null) {
+                readBuffer.append(buff)
+            }
+            output = readBuffer.toString()
+            if (!output) {
+                this.logger.error("${logPrefix}Unexpected empty result of running '${command}' command.")
+                def bufferedErrorReader = new BufferedReader(new InputStreamReader(cmdProcess.getErrorStream()))
+                def errBuff = ""
+                def readErrorBuffer = new StringBuffer()
+                while ((errBuff = bufferedErrorReader.readLine()) != null) {
+                    readErrorBuffer.append(errBuff)
+                }
+                throw new Exception(readErrorBuffer.toString())
+            }
+            return output
+        } catch (Exception exception) {
+            this.logError("Running '${command}' command failed.")
+            throw exception
+        }
+    }
+
+    /**
+     * Runs a process to call the React Native CLI Config command and parses the output
+     */
+    ArrayList<HashMap<String, String>> getReactNativeConfig() {
+        if (this.reactNativeModules != null) return this.reactNativeModules
+
+        ArrayList<HashMap<String, String>> reactNativeModules = new ArrayList<HashMap<String, String>>()
+
+        String[] reactNativeConfigCommand = [this.cliBinPath, "config"]
+        def reactNativeConfigOutput = this.getCommandOutput(reactNativeConfigCommand)
+
+        def json
+        try {
+            json = new JsonSlurper().parseText(reactNativeConfigOutput)
+        } catch (Exception exception) {
+            throw new Exception("Calling `${reactNativeConfigCommand}` finished with an exception. Error message: ${exception.toString()}. Output: ${reactNativeConfigOutput}");
+        }
+        def dependencies = json["dependencies"]
+        def project = json["project"]["android"]
+
+        if (project == null) {
+            throw new Exception("React Native CLI failed to determine Android project configuration. This is likely due to misconfiguration. Config output:\n${json.toMapString()}")
+        }
+
+        dependencies.each { name, value ->
+            def platformsConfig = value["platforms"];
+            def androidConfig = platformsConfig["android"]
+
+            if (androidConfig != null && androidConfig["sourceDir"] != null) {
+                this.logger.info("${logPrefix}Automatically adding native module '${name}'")
+
+                HashMap reactNativeModuleConfig = new HashMap<String, String>()
+                reactNativeModuleConfig.put("name", name)
+                reactNativeModuleConfig.put("nameCleansed", name.replaceAll('^@([\\w-]+)/', '$1_'))
+                reactNativeModuleConfig.put("androidSourceDir", androidConfig["sourceDir"])
+                reactNativeModuleConfig.put("packageInstance", androidConfig["packageInstance"])
+                reactNativeModuleConfig.put("packageImportPath", androidConfig["packageImportPath"])
+                this.logger.trace("${logPrefix}'${name}': ${reactNativeModuleConfig.toMapString()}")
+
+                reactNativeModules.add(reactNativeModuleConfig)
+            } else {
+                this.logger.info("${logPrefix}Skipping native module '${name}'")
+            }
+        }
+
+        return [reactNativeModules, json["project"]["android"]["packageName"]];
+    }
+}
+
+def generatedSrcDir = new File(buildDir, "generated/mendix/src/main/java")
+def generatedCodeDir = new File(generatedSrcDir, generatedFilePackage.replace('.', '/'))
+
+def capabilitiesConfig = new File("${rootDir}capabilities-setup-config.json")
+def unlinkedDependenciesConfigFile = new File("${rootDir}unlinked-dependency-config.json")
+def capabilitiesFile = new File("${rootDir}capabilities.android.json")
+def mendixModules = new MendixModules(capabilitiesConfig, unlinkedDependenciesConfigFile, capabilitiesFile, cliBinPath, rootDir, logger, LOG_PREFIX)
+
+def logLifecycle = { String message -> logger.lifecycle("${LOG_PREFIX}${message}") }
+
+
+ext.applyMendixGradle = { Project project ->
+    logLifecycle("Registering extra dependencies")
+    mendixModules.addExtraDependencies(project)
+
+    logLifecycle("Registering plugins")
+    mendixModules.addAndroidPlugins(project)
+    task generateMendixDependencies {
+        doLast {
+            logLifecycle("Executing Mendix Module Generator")
+            logLifecycle("App root: ${rootDir}")
+            logLifecycle("CLI path: ${cliBinPath}")
+
+            logLifecycle("Generating ${mainActivityObserverFileName}")
+            mendixModules.generateMainActivityObserver(generatedCodeDir, mainActivityObserverFileName, mainActivityObserverTemplate)
+
+            logLifecycle("Generating ${mendixPackageListFileName}")
+            mendixModules.generateMendixPackageList(generatedCodeDir, mendixPackageListFileName, mendixPackageListTemplate)
+        }
+    }
+
+    preBuild.dependsOn generateMendixDependencies
+
+    android {
+        sourceSets {
+            main {
+                java {
+                    srcDirs += generatedSrcDir
+                }
+            }
+        }
+    }
+}
+
+ext.applyMendixClassPaths = { Project project ->
+    logLifecycle("Registering class paths")
+    mendixModules.addClassPaths(project)
+}
diff --git a/android/settings.gradle b/android/settings.gradle
index cbe16c1..dffa19f 100644
--- a/android/settings.gradle
+++ b/android/settings.gradle
@@ -1,8 +1,6 @@
 rootProject.name = 'nativeTemplate'
 apply from: file("../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesSettingsGradle(settings)
 
-include ':react-native-firebase'
-project(':react-native-firebase').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-firebase/android')
 include ':react-native-code-push'
 project(':react-native-code-push').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-code-push/android/app')
 include ':react-native-splash-screen'
diff --git a/appcenter-build-config.json b/appcenter-build-config.json
index 839fc7b..2441cbb 100644
--- a/appcenter-build-config.json
+++ b/appcenter-build-config.json
@@ -3,10 +3,14 @@
     "trigger": "manual",
     "testEnabled": false,
     "signed": false,
-    "environmentVariables": [{ "name": "CODE_PUSH_KEY", "value": "" }, { "name": "IS_DEV_APP", "value": false }],
+    "environmentVariables": [
+      { "name": "CODE_PUSH_KEY", "value": "" },
+      { "name": "IS_DEV_APP", "value": false },
+      { "name": "SUPPORTS_MOBILE_TOOLKIT", "value": false }
+    ],
     "toolsets": {
       "xcode": {
-        "xcodeVersion": "11.5",
+        "xcodeVersion": "12.0",
         "automaticSigning": false,
         "projectOrWorkspacePath": "ios/NativeTemplate.xcworkspace",
         "podfilePath": "ios/Podfile",
@@ -15,7 +19,7 @@
       "javascript": {
         "packageJsonPath": "package.json",
         "runTests": false,
-        "nodeVersion": "10.x"
+        "nodeVersion": "12.x"
       },
       "buildscripts": {
         "package.json": {
@@ -29,7 +33,11 @@
     "trigger": "manual",
     "testEnabled": false,
     "signed": false,
-    "environmentVariables": [{ "name": "CODE_PUSH_KEY", "value": "" }, { "name": "IS_DEV_APP", "value": false }],
+    "environmentVariables": [
+      { "name": "CODE_PUSH_KEY", "value": "" },
+      { "name": "IS_DEV_APP", "value": false },
+      { "name": "SUPPORTS_MOBILE_TOOLKIT", "value": false }
+    ],
     "toolsets": {
       "android": {
         "module": "app",
@@ -43,7 +51,7 @@
       "javascript": {
         "packageJsonPath": "package.json",
         "runTests": false,
-        "nodeVersion": "10.x"
+        "nodeVersion": "12.x"
       },
       "buildscripts": {
         "package.json": {
diff --git a/appcenter-post-clone.sh b/appcenter-post-clone.sh
index 61fe2dd..b827ca0 100755
--- a/appcenter-post-clone.sh
+++ b/appcenter-post-clone.sh
@@ -1,4 +1,5 @@
 #!/usr/bin/env bash
+set -e
 
 # Untar bundle resources
 if [ -f "./android/res.tar.gz" ]; then 
diff --git a/appcenter-pre-build.sh b/appcenter-pre-build.sh
index 76e4a44..00d94d8 100755
--- a/appcenter-pre-build.sh
+++ b/appcenter-pre-build.sh
@@ -1,15 +1,21 @@
 #!/usr/bin/env bash
+set -e
+
+if [[ $SUPPORTS_MOBILE_TOOLKIT == True ]]; then
+    echo "Configuring template with mobile toolkit"
+    npm run configure
+fi
 
 INFO_PLIST=$APPCENTER_SOURCE_DIRECTORY/ios/$APPCENTER_XCODE_SCHEME/Info.plist
 if [[ -e "$INFO_PLIST" && $IS_DEV_APP == False ]]; then
     echo "Stripping unwanted MendixNative (i386, x86_64) archs"
     LIB_PATH=$APPCENTER_SOURCE_DIRECTORY/ios/MendixNative/libMendix.a
-    lipo -remove x86_64 -output $LIB_PATH $LIB_PATH
-    lipo -remove i386 -output $LIB_PATH $LIB_PATH
-    lipo -info $LIB_PATH
+    lipo -remove x86_64 -output $LIB_PATH $LIB_PATH || true
+    lipo -remove i386 -output $LIB_PATH $LIB_PATH || true
+    lipo -info $LIB_PATH || true
 
     echo "Updating Info.plist with code push key"
-    plutil -replace "CodePushKey" -string $CODE_PUSH_KEY $INFO_PLIST
+    plutil -replace "CodePushKey" -string $CODE_PUSH_KEY $INFO_PLIST || true
 
     cat $INFO_PLIST
 fi
diff --git a/capabilities-setup-config.json b/capabilities-setup-config.json
new file mode 100644
index 0000000..0ba8ec2
--- /dev/null
+++ b/capabilities-setup-config.json
@@ -0,0 +1,102 @@
+{
+    "deepLink": {
+        "ios": {
+            "AppDelegate": {
+                "imports": [
+                    "#import \"React/RCTLinkingManager.h\""
+                ],
+                "openURL": [
+                    "[RCTLinkingManager application:application openURL:url sourceApplication:sourceApplication annotation:annotation];"
+                ]
+            }
+        }
+    },
+    "pushNotifications": {
+        "android": {
+            "externalDependencies": [
+                "com.google.firebase:firebase-messaging:20.1.2",
+                "me.leolin:ShortcutBadger:1.1.22@aar"
+            ],
+            "packageListEntries": {
+                "imports": [
+                    "import io.invertase.firebase.messaging.RNFirebaseMessagingPackage;",
+                    "import io.invertase.firebase.notifications.RNFirebaseNotificationsPackage;"
+                ],
+                "packageClassInstances": [
+                    "new RNFirebaseMessagingPackage()",
+                    "new RNFirebaseNotificationsPackage()"
+                ]
+            },
+            "gradle": {
+                "classpaths": [
+                    "com.google.gms:google-services:4.2.0"
+                ],
+                "plugins": [
+                    "com.google.gms.google-services"
+                ]
+            }
+        },
+        "ios": {
+            "AppDelegate": {
+                "imports": [
+                    "#import <Firebase.h>",
+                    "#import \"RNFirebase/RNFirebaseNotifications.h\"",
+                    "#import \"RNFirebase/RNFirebaseMessaging.h\""
+                ],
+                "didFinishLaunchingWithOptions": [
+                    "[FIRApp configure];",
+                    "[RNFirebaseNotifications configure];"
+                ],
+                "didReceiveLocalNotification": [
+                    "[[RNFirebaseNotifications instance] didReceiveLocalNotification:notification];"
+                ],
+                "didReceiveRemoteNotification": [
+                    "[[RNFirebaseNotifications instance] didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];"
+                ],
+                "didRegisterUserNotificationSettings": [
+                    "[[RNFirebaseMessaging instance] didRegisterUserNotificationSettings:notificationSettings];"
+                ]
+            },
+            "pods": {
+                "Firebase/Core": {
+                    "version": "~> 6.19.0"
+                },
+                "Firebase/Messaging": {
+                    "version": "~> 6.19.0"
+                },
+                "GoogleUtilities": {
+                    "version": "~> 6.5.1"
+                }
+            }
+        }
+    },
+    "bluetooth": {
+        "ios": {
+            "pods": {
+                "react-native-ble-plx-swift": {
+                    "path": "react-native-ble-plx"
+                }
+            }
+        }
+    },
+    "maps": {},
+    "mapsIos": {
+        "ios": {
+            "AppDelegate": {
+                "imports": [
+                    "#import <GoogleMaps/GoogleMaps.h>"
+                ],
+                "didFinishLaunchingWithOptions": [
+                    "[GMSServices provideAPIKey:[[NSBundle mainBundle] objectForInfoDictionaryKey:@\"GoogleMapsApiKey\"] ?: @\"\"];"
+                ]
+            },
+            "pods": {
+                "react-native-google-maps": {
+                    "path": "react-native-maps"
+                },
+                "GoogleMaps": {},
+                "Google-Maps-iOS-Utils": {}
+            }
+        }
+    }
+}
diff --git a/capabilities.android.json b/capabilities.android.json
new file mode 100644
index 0000000..0919a26
--- /dev/null
+++ b/capabilities.android.json
@@ -0,0 +1,7 @@
+{
+    "deepLink": false,
+    "pushNotifications": false,
+    "bluetooth": true,
+    "maps": true,
+    "mapsIos": true
+}
diff --git a/capabilities.ios.json b/capabilities.ios.json
new file mode 100644
index 0000000..0919a26
--- /dev/null
+++ b/capabilities.ios.json
@@ -0,0 +1,7 @@
+{
+    "deepLink": false,
+    "pushNotifications": false,
+    "bluetooth": true,
+    "maps": true,
+    "mapsIos": true
+}
diff --git a/ios/AppDelegate.m b/ios/AppDelegate.m
index 613f280..fc371df 100644
--- a/ios/AppDelegate.m
+++ b/ios/AppDelegate.m
@@ -1,9 +1,7 @@
-#import <Firebase.h>
 #import "AppDelegate.h"
+#import "MendixAppDelegate.h"
 #import "MendixNative/MendixNative.h"
 #import "IQKeyboardManager/IQKeyboardManager.h"
-#import "RNFirebase/RNFirebaseNotifications.h"
-#import "RNFirebase/RNFirebaseMessaging.h"
 #import "SplashScreenPresenter.h"
 
 @implementation AppDelegate
@@ -11,11 +9,9 @@
 @synthesize shouldOpenInLastApp;
 
 - (BOOL) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
-  if (self.useFirebase) {
-    [FIRApp configure];
-    [RNFirebaseNotifications configure];
-  }
-
+  [MendixAppDelegate application:application didFinishLaunchingWithOptions:launchOptions];
+  [self setupUI];
+  
   NSBundle *mainBundle = [NSBundle mainBundle];
   NSString *targetName = [mainBundle objectForInfoDictionaryKey:@"TargetName"] ?: @"";
 
@@ -53,7 +49,7 @@
   NSURL *bundleUrl = [ReactNative.instance getJSBundleFile];
   
   if (bundleUrl != nil) {
-    [ReactNative.instance setup:[[MendixApp alloc] init:nil bundleUrl:bundleUrl runtimeUrl:runtimeUrl warningsFilter:none isDeveloperApp:false clearDataAtLaunch:false splashScreenPresenter:[SplashScreenPresenter new]] launchOptions:launchOptions];
+    [ReactNative.instance setup:[[MendixApp alloc] init:nil bundleUrl:bundleUrl runtimeUrl:runtimeUrl warningsFilter:none isDeveloperApp:NO clearDataAtLaunch:NO splashScreenPresenter:[SplashScreenPresenter new]] launchOptions:launchOptions];
     [ReactNative.instance start];
   } else {
     [self showUnrecoverableDialogWithTitle:@"No Mendix bundle found" message:@"Missing the Mendix app bundle. Make sure that the index.ios.bundle file is available in ios/NativeTemplate/Bundle folder. If building locally consult the documentation on how to generate a bundle from your project."];
@@ -63,27 +59,21 @@
 }
 
 - (void) application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification {
-  if (self.useFirebase) {
-    [[RNFirebaseNotifications instance] didReceiveLocalNotification:notification];
-  }
+  [MendixAppDelegate application:application didReceiveLocalNotification:notification];
 }
 
 - (void) application:(UIApplication *)application didReceiveRemoteNotification:(nonnull NSDictionary *)userInfo
 fetchCompletionHandler:(nonnull void (^)(UIBackgroundFetchResult))completionHandler{
-  if (self.useFirebase) {
-    [[RNFirebaseNotifications instance] didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];
-  }
+  [MendixAppDelegate application:application didReceiveRemoteNotification:userInfo fetchCompletionHandler:completionHandler];
 }
 
 - (void) application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings {
-  if (self.useFirebase) {
-    [[RNFirebaseMessaging instance] didRegisterUserNotificationSettings:notificationSettings];
-  }
+  [MendixAppDelegate application:application didRegisterUserNotificationSettings:notificationSettings];
 }
 
-- (BOOL) useFirebase {
-    NSString *path = [[NSBundle mainBundle] pathForResource:@"GoogleService-Info" ofType:@"plist"];
-    return [[NSFileManager defaultManager] fileExistsAtPath:path];
+- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
+  [MendixAppDelegate application:application openURL:url sourceApplication:sourceApplication annotation:annotation];
+  return YES;
 }
 
 - (WarningsFilter) getWarningFilterValue {
@@ -101,4 +91,10 @@ fetchCompletionHandler:(nonnull void (^)(UIBackgroundFetchResult))completionHand
   }]];
   [self.window.rootViewController presentViewController:alertController animated:YES completion:nil];
 }
+
+- (void) setupUI {
+  if (@available(iOS 13.4, *)) {
+    [UIDatePicker appearance].preferredDatePickerStyle = UIDatePickerStyleWheels;
+  }
+}
 @end
diff --git a/ios/Config/config.xcconfig b/ios/Config/config.xcconfig
index d9e8867..7adddb7 100644
--- a/ios/Config/config.xcconfig
+++ b/ios/Config/config.xcconfig
@@ -4,3 +4,5 @@ BUNDLE_DISPLAY_NAME = NativeTemplate
 BUNDLE_IDENTIFIER = com.mendix.native.template
 
 RUNTIME_URL = http:\/\/localhost:8080
+
+PRODUCT_NAME = nativeTemplate
diff --git a/ios/Dev/Config/config.xcconfig b/ios/Dev/Config/config.xcconfig
index 1766679..bab3094 100644
--- a/ios/Dev/Config/config.xcconfig
+++ b/ios/Dev/Config/config.xcconfig
@@ -3,3 +3,5 @@
 MAIN_STORY_BOARD = LaunchApp
 BUNDLE_DISPLAY_NAME = Dev - NativeTemplate
 BUNDLE_IDENTIFIER_APPEND = .developerapp
+
+PRODUCT_NAME = NativeTemplateDev
diff --git a/ios/MendixAppDelegate.h b/ios/MendixAppDelegate.h
new file mode 100644
index 0000000..b2c51c3
--- /dev/null
+++ b/ios/MendixAppDelegate.h
@@ -0,0 +1,16 @@
+#import <UIKit/UIKit.h>
+
+@interface MendixAppDelegate : NSObject
+
++ (void) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions;
+
++ (void) application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification;
+
++ (void) application:(UIApplication *)application didReceiveRemoteNotification:(nonnull NSDictionary *)userInfo
+fetchCompletionHandler:(nonnull void (^)(UIBackgroundFetchResult))completionHandler;
+
++ (void) application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings;
+
++ (void) application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation;
+
+@end
diff --git a/ios/Podfile b/ios/Podfile
index d5f81a2..4bec8af 100644
--- a/ios/Podfile
+++ b/ios/Podfile
@@ -1,6 +1,8 @@
 # Uncomment the next line to define a global platform for your project
 platform :ios, '10.0'
 require_relative '../node_modules/@react-native-community/cli-platform-ios/native_modules'
+require_relative './mendix_utils'
+generate_mendix_delegate
 
 def common_pods
   # Comment the next line if you don't want to use dynamic frameworks
@@ -41,32 +43,21 @@ def common_pods
   # RN pods end
 
   # Manually linked dependencies
-  pod 'react-native-camera', :path => '../node_modules/react-native-camera'
-  pod 'react-native-ble-plx', :path => '../node_modules/react-native-ble-plx'
-  pod 'react-native-ble-plx-swift', :path => '../node_modules/react-native-ble-plx'
-  pod 'react-native-maps', :path => '../node_modules/react-native-maps'
-  pod 'react-native-google-maps', :path => '../node_modules/react-native-maps'
-  pod 'react-native-geocoder', :path => '../node_modules/react-native-geocoder'
   pod 'react-native-splash-screen', :path => '../node_modules/react-native-splash-screen'
 
   # Third party dependencies of dependencies
-  pod 'GoogleMaps'
-  pod 'Google-Maps-iOS-Utils'
   pod 'IQKeyboardManager'
-  pod 'Firebase/Core', '~> 6.19.0'
-  pod 'Firebase/Messaging', '~> 6.19.0'
-  pod 'GoogleUtilities', '~> 6.5.1'
-  pod 'Fabric', '~> 1.10.2'
-  pod 'Crashlytics', '~> 3.14.0'
 end
 
 target 'nativeTemplate' do
+  generate_pod_dependencies
   use_native_modules!
   common_pods
   # Intentionally left empty
 end
 
 target 'dev' do
+  generate_pod_dependencies
   use_native_modules!
   common_pods
   # Intentionally left empty
diff --git a/ios/Podfile.lock b/ios/Podfile.lock
index b0a4579..bbea556 100644
--- a/ios/Podfile.lock
+++ b/ios/Podfile.lock
@@ -98,7 +98,7 @@ PODS:
     - GoogleUtilities/Network (~> 6.0)
     - "GoogleUtilities/NSData+zlib (~> 6.0)"
     - nanopb (= 0.3.9011)
-  - GoogleDataTransport (6.0.0)
+  - GoogleDataTransport (6.2.1)
   - GoogleDataTransportCCTSupport (3.0.0):
     - GoogleDataTransport (~> 6.0)
     - nanopb (~> 0.3.901)
@@ -139,7 +139,7 @@ PODS:
     - GoogleUtilities/MethodSwizzler
   - GoogleUtilities/UserDefaults (6.5.2):
     - GoogleUtilities/Logger
-  - IQKeyboardManager (6.5.5)
+  - IQKeyboardManager (6.5.6)
   - JWT (3.0.0-beta.12):
     - Base64 (~> 1.1.2)
   - libwebp (1.1.0):
@@ -156,8 +156,8 @@ PODS:
     - nanopb/encode (= 0.3.9011)
   - nanopb/decode (0.3.9011)
   - nanopb/encode (0.3.9011)
-  - PromisesObjC (1.2.8)
-  - Protobuf (3.11.4)
+  - PromisesObjC (1.2.11)
+  - Protobuf (3.13.0)
   - RCTRequired (0.61.5)
   - RCTTypeSafety (0.61.5):
     - FBLazyVector (= 0.61.5)
@@ -409,8 +409,8 @@ PODS:
     - React
   - RNCMaskedView (0.1.7):
     - React
-  - RNDateTimePicker (2.3.0):
-    - React
+  - RNDateTimePicker (3.0.4):
+    - React-Core
   - RNDeviceInfo (5.5.3):
     - React
   - RNFastImage (8.1.5):
@@ -443,22 +443,20 @@ PODS:
     - React
   - RNVectorIcons (6.6.0):
     - React
-  - SDWebImage (5.7.3):
-    - SDWebImage/Core (= 5.7.3)
-  - SDWebImage/Core (5.7.3)
+  - SDWebImage (5.10.0):
+    - SDWebImage/Core (= 5.10.0)
+  - SDWebImage/Core (5.10.0)
   - SDWebImageWebPCoder (0.4.1):
     - libwebp (~> 1.0)
     - SDWebImage/Core (~> 5.5)
-  - SSZipArchive (2.2.2)
+  - SSZipArchive (2.2.3)
   - TouchID (4.4.1):
     - React
   - Yoga (1.14.0)
 
 DEPENDENCIES:
   - CodePush (from `../node_modules/react-native-code-push`)
-  - Crashlytics (~> 3.14.0)
   - DoubleConversion (from `../node_modules/react-native/third-party-podspecs/DoubleConversion.podspec`)
-  - Fabric (~> 1.10.2)
   - FBLazyVector (from `../node_modules/react-native/Libraries/FBLazyVector`)
   - FBReactNativeSpec (from `../node_modules/react-native/Libraries/FBReactNativeSpec`)
   - Firebase/Core (~> 6.19.0)
@@ -680,10 +678,10 @@ EXTERNAL SOURCES:
 SPEC CHECKSUMS:
   Base64: cecfb41a004124895a7bcee567a89bae5a89d49b
   boost-for-react-native: 39c7adb57c4e60d6c5479dd8623128eb5b3f0f2c
-  CodePush: bb7e03266a59b81c45d67f518dd5eb30aeb09b1e
-  Crashlytics: 540b7e5f5da5a042647227a5e3ac51d85eed06df
+  CodePush: 46ca36050986e6afb911fc4eeb0fe80515ac1c19
+  Crashlytics: 9220f5bc89e7a618df411b4f639389dbfb0e03d2
   DoubleConversion: 5805e889d232975c086db112ece9ed034df7a0b2
-  Fabric: 706c8b8098fff96c33c0db69cbf81f9c551d0d74
+  Fabric: ea977e3cd9c20425516d3dafd3bf8c941c51223f
   FBLazyVector: aaeaf388755e4f29cd74acbc9e3b8da6d807c37f
   FBReactNativeSpec: 118d0d177724c2d67f08a59136eb29ef5943ec75
   Firebase: d55ddb0e0bb3207166cddc028647833d8a1b5b6f
@@ -699,16 +697,16 @@ SPEC CHECKSUMS:
   glog: 1f3da668190260b06b429bb211bfbee5cd790c28
   Google-Maps-iOS-Utils: c32891ff472eaaa1fca032beedafa1a013af7875
   GoogleAppMeasurement: c29d405ff76e18551b5d158eaba6753fda8c7542
-  GoogleDataTransport: 061fe7d9b476710e3cd8ea51e8e07d8b67c2b420
+  GoogleDataTransport: 9a8a16f79feffc7f42096743de2a7c4815e84020
   GoogleDataTransportCCTSupport: 0f39025e8cf51f168711bd3fb773938d7e62ddb5
   GoogleMaps: 32ca02de09de357a10ac773f2c70f1986751392d
   GoogleUtilities: ad0f3b691c67909d03a3327cc205222ab8f42e0e
-  IQKeyboardManager: 3a8b9e603f8b0eeaf5f096a1f2b2cfcf121992ef
+  IQKeyboardManager: 2a6e97afdafc7becf0cb17a9a8d795e3a980717f
   JWT: 9b5c05abbcc1a0e69c3c91e1655b3387fc7e581d
   libwebp: 946cb3063cea9236285f7e9a8505d806d30e07f3
   nanopb: 18003b5e52dab79db540fe93fe9579f399bd1ccd
-  PromisesObjC: c119f3cd559f50b7ae681fa59dc1acd19173b7e6
-  Protobuf: 176220c526ad8bd09ab1fb40a978eac3fef665f7
+  PromisesObjC: 8c196f5a328c2cba3e74624585467a557dcb482f
+  Protobuf: 3dac39b34a08151c6d949560efe3f86134a3f748
   RCTRequired: b153add4da6e7dbc44aebf93f3cf4fcae392ddf1
   RCTTypeSafety: 9aa1b91d7f9310fc6eadc3cf95126ffe818af320
   React: b6a59ef847b2b40bb6e0180a97d0ca716969ac78
@@ -720,21 +718,21 @@ SPEC CHECKSUMS:
   React-jsinspector: fa0ecc501688c3c4c34f28834a76302233e29dc0
   react-native-ble-plx: 304c7bee074a05581672c9990f375b3906808718
   react-native-ble-plx-swift: eb64f02b988becb84a60164aba9fab5d6ddb6dc8
-  react-native-calendar-events: eaa63134881d97488feb21ea114158f712894018
-  react-native-camera: 7c6cf8ddc64405e1aff0a26d1b487378597f9fed
-  react-native-cameraroll: dbda741db5dadcdcf738e55a1fd565c307943bca
+  react-native-calendar-events: 2fe35a9294af05de0ed819d3a1b5dac048d2c010
+  react-native-camera: 2b575b086c06caf89fd3d119d06bd977a9942103
+  react-native-cameraroll: 1edb879e985fe97d1d44f42372cb4a948e0384cd
   react-native-geocoder: 757427682892bb256f3b3745858cc90eba148a8e
-  react-native-geolocation: c956aeb136625c23e0dce0467664af2c437888c9
+  react-native-geolocation: cbd9d6bd06bac411eed2671810f454d4908484a8
   react-native-google-maps: 773b7bcef4f92005847cbf455ca1fa76a21e74c7
-  react-native-image-picker: 6a850c41f57f0848d918c2a77aedd7aa272ffa30
+  react-native-image-picker: 668e72d0277dc8c12ae90e835507c1eddd2e4f85
   react-native-maps: 6e1cf14d0aabefe59966da6dad7cb662251d3d83
-  react-native-netinfo: 73303369946c2487c600418961bfdc87748b832f
-  react-native-safe-area-context: e200d4433aba6b7e60b52da5f37af11f7a0b0392
+  react-native-netinfo: c67896313964727ddae153d6e119f65dae840d51
+  react-native-safe-area-context: 8260e5157617df4b72865f44006797f895b2ada7
   react-native-splash-screen: 200d11d188e2e78cea3ad319964f6142b6384865
-  react-native-sqlite-storage: f06bfba10f67f989c00b6a699b9c2b80a816edbe
-  react-native-video: d01ed7ff1e38fa7dcc6c15c94cf505e661b7bfd0
-  react-native-view-shot: 4475fde003fe8a210053d1f98fb9e06c1d834e1c
-  react-native-webview: fcb5f377aadc216273300f452ee0d321fb85809b
+  react-native-sqlite-storage: bb10beb2407e5fc21f3f1bcd86bacbfd6edcc818
+  react-native-video: 961749da457e73bf0b5565edfbaffc25abfb8974
+  react-native-view-shot: 08c46c9e8e92f6681e8f2ffa55ac3d06e7e99070
+  react-native-webview: 055c7110f17c2f19c971f655064ee480638db668
   React-RCTActionSheet: 600b4d10e3aea0913b5a92256d2719c0cdd26d76
   React-RCTAnimation: 791a87558389c80908ed06cc5dfc5e7920dfa360
   React-RCTBlob: d89293cc0236d9cb0933d85e430b0bbe81ad1d72
@@ -745,27 +743,27 @@ SPEC CHECKSUMS:
   React-RCTText: 9ccc88273e9a3aacff5094d2175a605efa854dbe
   React-RCTVibration: a49a1f42bf8f5acf1c3e297097517c6b3af377ad
   ReactCommon: 198c7c8d3591f975e5431bec1b0b3b581aa1c5dd
-  ReactNativeART: 78edc68dd4a1e675338cd0cd113319cf3a65f2ab
+  ReactNativeART: f003b07dfa7098aa419ed95b69560923440b1eee
   ReactNativeDarkMode: 0178ffca3b10f6a7c9f49d6f9810232b328fa949
-  RNCAsyncStorage: e0dd7c8a36543b4ef84969acd9f8aceba3a92dc2
-  RNCMaskedView: 76c40a1d41c3e2535df09246a2b5487f04de0814
-  RNDateTimePicker: 63e79b1e0dc6da8806ed8cf76e8528f7f88bcbc3
-  RNDeviceInfo: 310c1f43d418d950a193c7650de2f9559c906048
+  RNCAsyncStorage: 00bdf63f7f1e0f11d3323533dba4f222e58bf092
+  RNCMaskedView: 90dd32f5b786bd562e876e1421ea77c700cbf71e
+  RNDateTimePicker: 88dc10d685ce961339bad3353c64db96c5abd19b
+  RNDeviceInfo: 67607dfe9cfbed105838144c40187a8392aa404d
   RNFastImage: 35ae972d6727c84ee3f5c6897e07f84d0a3445e9
   RNFirebase: 37daa9a346d070f9f6ee1f3b4aaf4c8e3b1d5d1c
   RNGestureHandler: dde546180bf24af0b5f737c8ad04b6f3fa51609a
-  RNInAppBrowser: 9936b2e23ab7ed9b6ac938eb1c4a656b95292e11
-  RNLocalize: 215c419a17d7585eb7a63c748ebfd042e0cb2c3d
+  RNInAppBrowser: b51ad29a3cfe36a9a55866d42fc169aa7db8522e
+  RNLocalize: d8025bb1ac74c0ad54155ea9862538624ebf74d8
   RNReanimated: 031fe8d9ea93c2bd689a40f05320ef9d96f74d7f
-  RNSound: da030221e6ac7e8290c6b43f2b5f2133a8e225b0
+  RNSound: c980916b596cc15c8dcd2f6ecd3b13c4881dbe20
   RNSVG: 7e16ddfc6e00d5aa69c9eb83e699bcce5dcb85d4
   RNVectorIcons: 0bb4def82230be1333ddaeee9fcba45f0b288ed4
-  SDWebImage: 97351f6582ceca541ea294ba66a1fcb342a331c2
+  SDWebImage: 9169792e9eec3e45bba2a0c02f74bf8bd922d1ee
   SDWebImageWebPCoder: 36f8f47bd9879a8aea6044765c1351120fd8e3a8
-  SSZipArchive: fa16b8cc4cdeceb698e5e5d9f67e9558532fbf23
+  SSZipArchive: 62d4947b08730e4cda640473b0066d209ff033c9
   TouchID: ba4c656d849cceabc2e4eef722dea5e55959ecf4
   Yoga: f2a7cd4280bfe2cca5a7aed98ba0eb3d1310f18b
 
-PODFILE CHECKSUM: 0cebfb2ab0abcf7ed7edc73265786a8151a4458d
+PODFILE CHECKSUM: 907c29c4504ccf424d696b27015e7d1f356cb212
 
-COCOAPODS: 1.9.1
+COCOAPODS: 1.10.0
diff --git a/ios/mendix_utils.rb b/ios/mendix_utils.rb
new file mode 100644
index 0000000..5f4379c
--- /dev/null
+++ b/ios/mendix_utils.rb
@@ -0,0 +1,143 @@
+require "json"
+
+def generate_pod_dependencies
+  resolved_pods = {}
+
+  capabilities_setup_config = get_capabilities_setup_config
+  get_project_capabilities.select { |_, value| value == true }.each do |name, _|
+    capability = capabilities_setup_config[name.to_s]
+    if capability.nil?
+      Pod::UI.warn "Capability for '#{name.to_s}' is not valid. This file should not be manipulated without guidance."
+      next
+    end
+
+    next unless capability["ios"] && pods = capability["ios"]["pods"]
+    resolved_pods.merge! pods
+  end
+
+  modules = get_react_native_config["dependencies"]
+  get_unlinked_dependency_config.each do |name, options|
+    next unless options["ios"] && modules.include?(name) && pods = options["ios"]["pods"]
+    resolved_pods.merge! pods
+  end
+
+  include_pods(resolved_pods.compact)
+end
+
+def generate_mendix_delegate
+  imports = []
+  hooks = {
+    didFinishLaunchingWithOptions: [],
+    didReceiveLocalNotification: [],
+    didReceiveRemoteNotification: [],
+    didRegisterUserNotificationSettings: [],
+    openURL: [],
+  }
+
+  capabilities_setup_config = get_capabilities_setup_config
+  get_project_capabilities.select { |_, value| value == true }.each do |name, _|
+    capability = capabilities_setup_config[name.to_s]
+    if capability.nil?
+      Pod::UI.warn "Capability for '#{name.to_s}' is not valid. This file should not be manipulated without guidance."
+      next
+    end
+
+    next if capability["ios"].nil?
+
+    Pod::UI.notice "Capability for '#{name.to_s}' was enabled for this project."
+
+    next unless capability = capability["ios"]["AppDelegate"]
+
+    imports << capability["imports"] if !capability["imports"].nil?
+
+    hooks.each do |name, hook|
+      hook << capability[name.to_s].map { |line| "  #{line}" } if !capability[name.to_s].nil?
+    end
+  end
+
+  File.open("MendixAppDelegate.m", "w") do |file|
+    mendix_app_delegate = mendix_app_delegate_template.sub("{{ imports }}", stringify(imports))
+    hooks.each { |name, hook| mendix_app_delegate.sub!("{{ #{name.to_s} }}", stringify(hook)) }
+    file << mendix_app_delegate
+  end
+end
+
+def mendix_app_delegate_template
+  %(// DO NOT EDIT BY HAND. THIS FILE IS AUTO-GENERATED
+#import <Foundation/Foundation.h>
+#import "MendixAppDelegate.h"
+{{ imports }}
+
+@implementation MendixAppDelegate
+
++ (void) application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
+{{ didFinishLaunchingWithOptions }}
+}
+
++ (void) application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification {
+{{ didReceiveLocalNotification }}
+}
+
++ (void) application:(UIApplication *)application didReceiveRemoteNotification:(nonnull NSDictionary *)userInfo
+fetchCompletionHandler:(nonnull void (^)(UIBackgroundFetchResult))completionHandler{
+{{ didReceiveRemoteNotification }}
+}
+
++ (void) application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings {
+{{ didRegisterUserNotificationSettings }}
+}
+
++ (void) application:(UIApplication *)application openURL:(NSURL *)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation {
+{{ openURL }}
+}
+
+@end\n)
+end
+
+def stringify(array)
+  array.flatten.uniq.join("\n")
+end
+
+def read_json_file_gracefully(path)
+  file_path = File.join(__dir__, "..", path)
+  JSON.parse(File.read(file_path)) if File.exists?(file_path)
+end
+
+def get_unlinked_dependency_config
+  read_json_file_gracefully("unlinked-dependency-config.json") || {}
+end
+
+def get_capabilities_setup_config
+  read_json_file_gracefully("capabilities-setup-config.json") || {}
+end
+
+def get_project_capabilities
+  read_json_file_gracefully("capabilities.ios.json") || {}
+end
+
+# Source @react-native-community/cli-platform-ios/native_modules
+def get_react_native_config
+  cli_command = "try {console.log(require('@react-native-community/cli').bin);} catch (e) {console.log(require('react-native/cli').bin);}"
+  cli_result = Pod::Executable.execute_command("node", ["-e", cli_command], true).strip
+
+  json = []
+  IO.popen(["node", cli_result, "config"]) do |data|
+    while line = data.gets
+      json << line
+    end
+  end
+
+  JSON.parse(json.join("\n"))
+end
+
+def include_pods(pods = {})
+  pods.each do |name, pod|
+    if pod["path"] != nil && !pod["path"].empty?
+      pod name, :path => "../node_modules/#{pod["path"]}"
+    elsif pod["version"] != nil && !pod["version"].empty?
+      pod name, pod["version"]
+    else
+      pod name
+    end
+  end
+end
diff --git a/ios/nativeTemplate.xcodeproj/project.pbxproj b/ios/nativeTemplate.xcodeproj/project.pbxproj
index f62bfe0..b789257 100644
--- a/ios/nativeTemplate.xcodeproj/project.pbxproj
+++ b/ios/nativeTemplate.xcodeproj/project.pbxproj
@@ -34,6 +34,8 @@
 		2C887FE324B8948F0003DC53 /* StoryBoardSplash.m in Sources */ = {isa = PBXBuildFile; fileRef = 2C887FE124B8948F0003DC53 /* StoryBoardSplash.m */; };
 		2CD8398224D14DF900A83374 /* libMendix.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 2CD8397224D14DF700A83374 /* libMendix.a */; };
 		2CD8398324D14DF900A83374 /* libMendix.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 2CD8397224D14DF700A83374 /* libMendix.a */; };
+		2C4991D124C593C3008403BB /* MendixAppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = 2C4991D024C593C3008403BB /* MendixAppDelegate.m */; };
+		2C4991D224C593C3008403BB /* MendixAppDelegate.m in Sources */ = {isa = PBXBuildFile; fileRef = 2C4991D024C593C3008403BB /* MendixAppDelegate.m */; };
 		9DF4091425A46A56E2A9A405 /* libPods-nativeTemplate.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 73F36AC2CCD37CCD4E7B1BB8 /* libPods-nativeTemplate.a */; };
 		B28D6DAD97033B55832E5853 /* libPods-dev.a in Frameworks */ = {isa = PBXBuildFile; fileRef = 11502903429AC2E6E69E6482 /* libPods-dev.a */; };
 		EB55620C22E0755000E19C26 /* glyphicons-halflings-regular.ttf in Resources */ = {isa = PBXBuildFile; fileRef = EB55620B22E0755000E19C26 /* glyphicons-halflings-regular.ttf */; };
@@ -89,6 +91,8 @@
 		2CD8397F24D14DF800A83374 /* UnsupportedFeatures.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = UnsupportedFeatures.h; sourceTree = "<group>"; };
 		2CD8398024D14DF800A83374 /* MendixBackwardsCompatUtility.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = MendixBackwardsCompatUtility.h; sourceTree = "<group>"; };
 		2CD8398124D14DF900A83374 /* RuntimeInfoProvider.h */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.h; path = RuntimeInfoProvider.h; sourceTree = "<group>"; };
+		2C4991D024C593C3008403BB /* MendixAppDelegate.m */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.objc; path = MendixAppDelegate.m; sourceTree = "<group>"; };
+		2C4991D324C595F0008403BB /* MendixAppDelegate.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = MendixAppDelegate.h; sourceTree = "<group>"; };
 		2E683DD88AD2190EB6610BB7 /* Pods-nativeTemplate.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-nativeTemplate.debug.xcconfig"; path = "Target Support Files/Pods-nativeTemplate/Pods-nativeTemplate.debug.xcconfig"; sourceTree = "<group>"; };
 		3A1AE629EDD2EFAEE88E17A6 /* Pods-dev.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-dev.release.xcconfig"; path = "Target Support Files/Pods-dev/Pods-dev.release.xcconfig"; sourceTree = "<group>"; };
 		3A50E1C430A9EB98E247701D /* Pods-nativeTemplate.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-nativeTemplate.debug.xcconfig"; path = "Target Support Files/Pods-nativeTemplate/Pods-nativeTemplate.debug.xcconfig"; sourceTree = "<group>"; };
@@ -148,6 +152,8 @@
 				2C887F7124B7BFFE0003DC53 /* SplashScreenPresenter.m */,
 				2C887FE024B893FC0003DC53 /* RNSplashScreen+StoryBoardSplash.h */,
 				2C887FE124B8948F0003DC53 /* StoryBoardSplash.m */,
+				2C4991D024C593C3008403BB /* MendixAppDelegate.m */,
+				2C4991D324C595F0008403BB /* MendixAppDelegate.h */,
 				13B07FB61A68108700A75B9A /* Info.plist */,
 				1AAE158823C5FEFC00F855F4 /* SwiftInterop.swift */,
 				2C887FD924B88A0E0003DC53 /* LaunchScreen.storyboard */,
@@ -571,6 +577,7 @@
 				2C887FE224B8948F0003DC53 /* StoryBoardSplash.m in Sources */,
 				EB59215B23BFA1F5001D6155 /* main.m in Sources */,
 				2C887F7224B7BFFE0003DC53 /* SplashScreenPresenter.m in Sources */,
+				2C4991D124C593C3008403BB /* MendixAppDelegate.m in Sources */,
 				1AAE158923C5FEFC00F855F4 /* SwiftInterop.swift in Sources */,
 				EB55E08A23BF7FF700E3FB34 /* AppDelegate.m in Sources */,
 			);
@@ -589,6 +596,7 @@
 				EB55E08823BF7FF500E3FB34 /* AppDelegate.m in Sources */,
 				1A0B3A992397DA2300388BF7 /* LaunchAppViewController.swift in Sources */,
 				1A0B3ADC2397F1FF00388BF7 /* URLValidator.swift in Sources */,
+				2C4991D224C593C3008403BB /* MendixAppDelegate.m in Sources */,
 				EB59215C23BFA1F5001D6155 /* main.m in Sources */,
 				1A0B3AD82397EB4000388BF7 /* RoundedButton.swift in Sources */,
 			);
@@ -674,7 +682,7 @@
 					"-lc++",
 				);
 				PRODUCT_BUNDLE_IDENTIFIER = "$(PRODUCT_BUNDLE_IDENTIFIER)";
-				PRODUCT_NAME = nativeTemplate;
+				PRODUCT_NAME = "$(PRODUCT_NAME)";
 				SWIFT_INCLUDE_PATHS = "$(inherited) ${SRCROOT}/MendixNative";
 				SWIFT_OBJC_BRIDGING_HEADER = "nativeTemplate-Bridging-Header.h";
 				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
@@ -748,7 +756,7 @@
 					"-lc++",
 				);
 				PRODUCT_BUNDLE_IDENTIFIER = "$(PRODUCT_BUNDLE_IDENTIFIER)";
-				PRODUCT_NAME = nativeTemplate;
+				PRODUCT_NAME = "$(PRODUCT_NAME)";
 				PROVISIONING_PROFILE_SPECIFIER = "";
 				SWIFT_INCLUDE_PATHS = "$(inherited) ${PROJECT_DIR} ${SRCROOT}/MendixNative";
 				SWIFT_OBJC_BRIDGING_HEADER = "nativeTemplate-Bridging-Header.h";
@@ -795,7 +803,7 @@
 				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
 				MTL_FAST_MATH = YES;
 				PRODUCT_BUNDLE_IDENTIFIER = "$(PRODUCT_BUNDLE_IDENTIFIER)";
-				PRODUCT_NAME = NativeTemplateDev;
+				PRODUCT_NAME = "$(PRODUCT_NAME)";
 				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
 				SWIFT_INCLUDE_PATHS = "$(inherited) ${SRCROOT}/MendixNative";
 				SWIFT_OBJC_BRIDGING_HEADER = "nativeTemplate-Bridging-Header.h";
@@ -843,7 +851,7 @@
 				MARKETING_VERSION = 1.0.0;
 				MTL_FAST_MATH = YES;
 				PRODUCT_BUNDLE_IDENTIFIER = "$(PRODUCT_BUNDLE_IDENTIFIER)";
-				PRODUCT_NAME = NativeTemplateDev;
+				PRODUCT_NAME = "$(PRODUCT_NAME)";
 				SWIFT_INCLUDE_PATHS = "$(inherited) ${SRCROOT}/MendixNative";
 				SWIFT_OBJC_BRIDGING_HEADER = "nativeTemplate-Bridging-Header.h";
 				SWIFT_OPTIMIZATION_LEVEL = "-Owholemodule";
@@ -963,7 +971,7 @@
 					"-lc++",
 				);
 				PRODUCT_BUNDLE_IDENTIFIER = "$(PRODUCT_BUNDLE_IDENTIFIER)";
-				PRODUCT_NAME = nativeTemplate;
+				PRODUCT_NAME = "$(PRODUCT_NAME)";
 				PROVISIONING_PROFILE_SPECIFIER = "";
 				SWIFT_INCLUDE_PATHS = "$(inherited) ${PROJECT_DIR} ${SRCROOT}/MendixNative";
 				SWIFT_OBJC_BRIDGING_HEADER = "nativeTemplate-Bridging-Header.h";
@@ -1010,7 +1018,7 @@
 				MARKETING_VERSION = 1.0.0;
 				MTL_FAST_MATH = YES;
 				PRODUCT_BUNDLE_IDENTIFIER = "$(PRODUCT_BUNDLE_IDENTIFIER)";
-				PRODUCT_NAME = NativeTemplateDev;
+				PRODUCT_NAME = "$(PRODUCT_NAME)";
 				SWIFT_INCLUDE_PATHS = "$(inherited) ${SRCROOT}/MendixNative";
 				SWIFT_OBJC_BRIDGING_HEADER = "nativeTemplate-Bridging-Header.h";
 				SWIFT_OPTIMIZATION_LEVEL = "-Owholemodule";
diff --git a/ios/nativeTemplate/Images.xcassets/AppIcon.appiconset/Contents.json b/ios/nativeTemplate/Images.xcassets/AppIcon.appiconset/Contents.json
index 9f926e3..cee16f9 100644
--- a/ios/nativeTemplate/Images.xcassets/AppIcon.appiconset/Contents.json
+++ b/ios/nativeTemplate/Images.xcassets/AppIcon.appiconset/Contents.json
@@ -48,6 +48,60 @@
       "filename" : "app@3x.png",
       "scale" : "3x"
     },
+    {
+      "filename" : "notification@1x.png",
+      "idiom" : "ipad",
+      "scale" : "1x",
+      "size" : "20x20"
+    },
+    {
+      "filename" : "notification@2x.png",
+      "idiom" : "ipad",
+      "scale" : "2x",
+      "size" : "20x20"
+    },
+    {
+      "filename" : "settings@1x.png",
+      "idiom" : "ipad",
+      "scale" : "1x",
+      "size" : "29x29"
+    },
+    {
+      "filename" : "settings@2x.png",
+      "idiom" : "ipad",
+      "scale" : "2x",
+      "size" : "29x29"
+    },
+    {
+      "filename" : "spotlight@1x.png",
+      "idiom" : "ipad",
+      "scale" : "1x",
+      "size" : "40x40"
+    },
+    {
+      "filename" : "spotlight@2x.png",
+      "idiom" : "ipad",
+      "scale" : "2x",
+      "size" : "40x40"
+    },
+    {
+      "filename" : "ipadapp@1x.png",
+      "idiom" : "ipad",
+      "scale" : "1x",
+      "size" : "76x76"
+    },
+    {
+      "filename" : "ipadapp@2x.png",
+      "idiom" : "ipad",
+      "scale" : "2x",
+      "size" : "76x76"
+    },
+    {
+      "filename" : "ipadproapp@2x.png",
+      "idiom" : "ipad",
+      "scale" : "2x",
+      "size" : "83.5x83.5"
+    },
     {
       "size" : "1024x1024",
       "idiom" : "ios-marketing",
diff --git a/ios/nativeTemplate/Info.plist b/ios/nativeTemplate/Info.plist
index d12e1a7..32f0ee6 100644
--- a/ios/nativeTemplate/Info.plist
+++ b/ios/nativeTemplate/Info.plist
@@ -29,6 +29,8 @@
 	<string>1</string>
 	<key>CodePushKey</key>
 	<string></string>
+	<key>GoogleMapsApiKey</key>
+	<string></string>
 	<key>LSRequiresIPhoneOS</key>
 	<true/>
 	<key>NSAppTransportSecurity</key>
diff --git a/mendix_version.json b/mendix_version.json
index 4f9b643..5ec1971 100644
--- a/mendix_version.json
+++ b/mendix_version.json
@@ -11,7 +11,11 @@
     "max": "3.2.*",
     "min": "3.2.0"
   },
-  "8.6.3": {
+  ">=8.7.0": {
+    "max": "3.1.*",
+    "min": "2.1.0"
+  },
+  ">=8.6.3": {
     "max": "3.2.*",
     "min": "3.2.0"
   },
diff --git a/package-lock.json b/package-lock.json
index f616c0b..19284b9 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,6 +1,6 @@
 {
   "name": "native-template",
-  "version": "5.0.2",
+  "version": "5.1.10",
   "lockfileVersion": 1,
   "requires": true,
   "dependencies": {
@@ -3750,9 +3750,9 @@
       "integrity": "sha512-ng6Tm537E/M42GjE4TRUxQyL8sRfClcL7bQWblOCoxPZzJ2J3bdALsjeG3vDnVCIfI/R0AeFalN9KjMt0+Z/Zg=="
     },
     "@react-native-community/datetimepicker": {
-      "version": "2.3.0",
-      "resolved": "https://registry.npmjs.org/@react-native-community/datetimepicker/-/datetimepicker-2.3.0.tgz",
-      "integrity": "sha512-kEmhnvkVm0/WJxle2Oze1Wu5pSO65jeP6vdVJzglgQDI3X9bHUlId0JTKZPpDAB9nFUM8cp5X5RSR0KW0SbFsA==",
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/@react-native-community/datetimepicker/-/datetimepicker-3.0.4.tgz",
+      "integrity": "sha512-IsBkemz1XYubH5twfQPC/xleZdILA5SEUaLJ2C86IbnIOctb6suk8tB6uT9VxQkCsw4zjkrlqt9p9LGx9DJ97w==",
       "requires": {
         "invariant": "^2.2.4"
       }
@@ -3902,6 +3902,12 @@
       "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-15.0.0.tgz",
       "integrity": "sha512-FA/BWv8t8ZWJ+gEOnLLd8ygxH/2UFbAvgEonyfN6yWGLKc7zVjbpl2Y4CTjid9h2RfgPP6SEt6uHwEOply00yw=="
     },
+    "@yarnpkg/lockfile": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@yarnpkg/lockfile/-/lockfile-1.1.0.tgz",
+      "integrity": "sha512-GpSwvyXOcOOlV70vbnzjj4fW5xW/FdUF6nQEt1ENy7m4ZCczi1+/buVUPAqmGfqznsORNFzUMjctTIp8a9tuCQ==",
+      "dev": true
+    },
     "abab": {
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/abab/-/abab-2.0.3.tgz",
@@ -4819,13 +4825,13 @@
       "integrity": "sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A=="
     },
     "bunyan": {
-      "version": "1.8.13",
-      "resolved": "https://registry.npmjs.org/bunyan/-/bunyan-1.8.13.tgz",
-      "integrity": "sha512-4zO4iMxZeCpf+95ERsr83nwQr11o1KY2FLhX4wZ6kPXieIVYL3k9eX+N6vbHhFEK5h5O/qCQpfXt7N9VBAIvCA==",
+      "version": "1.8.14",
+      "resolved": "https://registry.npmjs.org/bunyan/-/bunyan-1.8.14.tgz",
+      "integrity": "sha512-LlahJUxXzZLuw/hetUQJmRgZ1LF6+cr5TPpRj6jf327AsiIq2jhYEH4oqUUkVKTor+9w2BT3oxVwhzE5lw9tcg==",
       "dev": true,
       "requires": {
         "dtrace-provider": "~0.8",
-        "moment": "^2.10.6",
+        "moment": "^2.19.3",
         "mv": "~2",
         "safe-json-stringify": "~1"
       }
@@ -5513,9 +5519,9 @@
       "dev": true
     },
     "detox": {
-      "version": "16.9.2",
-      "resolved": "https://registry.npmjs.org/detox/-/detox-16.9.2.tgz",
-      "integrity": "sha512-yi74zL3hHFRU131B5tgZiYh0hPWvpryntllAKEpxRGRRuz+11s2+TjpuS0M02jGOdDMFBk5BzcXFGM57FWbWNA==",
+      "version": "17.6.1",
+      "resolved": "https://registry.npmjs.org/detox/-/detox-17.6.1.tgz",
+      "integrity": "sha512-NPZabH3ixOdXCbDDQeRToUxXTN1kHiK7WhCCjH4YHtKNaprcYiYqPgIloEykauHvpgynebmyTBxOY6hDtsiO4Q==",
       "dev": true,
       "requires": {
         "bunyan": "^1.8.12",
@@ -5530,6 +5536,7 @@
         "lodash": "^4.17.5",
         "minimist": "^1.2.0",
         "proper-lockfile": "^3.0.2",
+        "resolve-from": "^5.0.0",
         "sanitize-filename": "^1.6.1",
         "shell-utils": "^1.0.9",
         "signal-exit": "^3.0.3",
@@ -5539,7 +5546,8 @@
         "which": "^1.3.1",
         "ws": "^3.3.1",
         "yargs": "^13.0.0",
-        "yargs-parser": "^13.0.0"
+        "yargs-parser": "^13.0.0",
+        "yargs-unparser": "^1.6.3"
       },
       "dependencies": {
         "ansi-regex": {
@@ -5607,6 +5615,12 @@
           "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
           "dev": true
         },
+        "resolve-from": {
+          "version": "5.0.0",
+          "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
+          "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
+          "dev": true
+        },
         "signal-exit": {
           "version": "3.0.3",
           "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.3.tgz",
@@ -6351,6 +6365,46 @@
         }
       }
     },
+    "find-yarn-workspace-root": {
+      "version": "1.2.1",
+      "resolved": "https://registry.npmjs.org/find-yarn-workspace-root/-/find-yarn-workspace-root-1.2.1.tgz",
+      "integrity": "sha512-dVtfb0WuQG+8Ag2uWkbG79hOUzEsRrhBzgfn86g2sJPkzmcpGdghbNTfUKGTxymFrY/tLIodDzLoW9nOJ4FY8Q==",
+      "dev": true,
+      "requires": {
+        "fs-extra": "^4.0.3",
+        "micromatch": "^3.1.4"
+      },
+      "dependencies": {
+        "fs-extra": {
+          "version": "4.0.3",
+          "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-4.0.3.tgz",
+          "integrity": "sha512-q6rbdDd1o2mAnQreO7YADIxf/Whx4AHBiRf6d+/cVT8h44ss+lHgxf1FemcqDnQt9X3ct4McHr+JMGlYSsK7Cg==",
+          "dev": true,
+          "requires": {
+            "graceful-fs": "^4.1.2",
+            "jsonfile": "^4.0.0",
+            "universalify": "^0.1.0"
+          }
+        }
+      }
+    },
+    "flat": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/flat/-/flat-4.1.0.tgz",
+      "integrity": "sha512-Px/TiLIznH7gEDlPXcUD4KnBusa6kR6ayRUVcnEAbreRIuhkqow/mun59BuRXwoYk7ZQOLW1ZM05ilIvK38hFw==",
+      "dev": true,
+      "requires": {
+        "is-buffer": "~2.0.3"
+      },
+      "dependencies": {
+        "is-buffer": {
+          "version": "2.0.4",
+          "resolved": "https://registry.npmjs.org/is-buffer/-/is-buffer-2.0.4.tgz",
+          "integrity": "sha512-Kq1rokWXOPXWuaMAqZiJW4XxsmD9zGx9q4aePabbn3qCRGedtH7Cm+zV8WETitMfu1wdh+Rvd6w5egwSngUX2A==",
+          "dev": true
+        }
+      }
+    },
     "for-in": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/for-in/-/for-in-1.0.2.tgz",
@@ -7403,6 +7457,12 @@
         "kind-of": "^3.0.2"
       }
     },
+    "is-plain-obj": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-1.1.0.tgz",
+      "integrity": "sha1-caUMhCnfync8kqOQpKA7OfzVHT4=",
+      "dev": true
+    },
     "is-plain-object": {
       "version": "2.0.4",
       "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-2.0.4.tgz",
@@ -10994,6 +11054,15 @@
         "graceful-fs": "^4.1.9"
       }
     },
+    "klaw-sync": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/klaw-sync/-/klaw-sync-6.0.0.tgz",
+      "integrity": "sha512-nIeuVSzdCCs6TDPTqI8w1Yre34sSq7AkZ4B3sfOBbI2CgVSB4Du4aLQijFU2+lhAFCwt9+42Hel6lQNIv6AntQ==",
+      "dev": true,
+      "requires": {
+        "graceful-fs": "^4.1.11"
+      }
+    },
     "kleur": {
       "version": "3.0.3",
       "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
@@ -11762,9 +11831,9 @@
       }
     },
     "moment": {
-      "version": "2.27.0",
-      "resolved": "https://registry.npmjs.org/moment/-/moment-2.27.0.tgz",
-      "integrity": "sha512-al0MUK7cpIcglMv3YF13qSgdAIqxHTO7brRtaz3DlSULbqfazqkc5kEjNrLDOM7fsjshoFIihnU8snrP7zUvhQ==",
+      "version": "2.29.0",
+      "resolved": "https://registry.npmjs.org/moment/-/moment-2.29.0.tgz",
+      "integrity": "sha512-z6IJ5HXYiuxvFTI6eiQ9dm77uE0gyy1yXNApVHqTcnIKfY9tIwEjlzsZ6u1LQXvVgKeTnv9Xm7NDvJ7lso3MtA==",
       "dev": true,
       "optional": true
     },
@@ -12311,6 +12380,26 @@
       "resolved": "https://registry.npmjs.org/pascalcase/-/pascalcase-0.1.1.tgz",
       "integrity": "sha1-s2PlXoAGym/iF4TS2yK9FdeRfxQ="
     },
+    "patch-package": {
+      "version": "6.2.2",
+      "resolved": "https://registry.npmjs.org/patch-package/-/patch-package-6.2.2.tgz",
+      "integrity": "sha512-YqScVYkVcClUY0v8fF0kWOjDYopzIM8e3bj/RU1DPeEF14+dCGm6UeOYm4jvCyxqIEQ5/eJzmbWfDWnUleFNMg==",
+      "dev": true,
+      "requires": {
+        "@yarnpkg/lockfile": "^1.1.0",
+        "chalk": "^2.4.2",
+        "cross-spawn": "^6.0.5",
+        "find-yarn-workspace-root": "^1.2.1",
+        "fs-extra": "^7.0.1",
+        "is-ci": "^2.0.0",
+        "klaw-sync": "^6.0.0",
+        "minimist": "^1.2.0",
+        "rimraf": "^2.6.3",
+        "semver": "^5.6.0",
+        "slash": "^2.0.0",
+        "tmp": "^0.0.33"
+      }
+    },
     "path-exists": {
       "version": "3.0.0",
       "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
@@ -13275,9 +13364,9 @@
       }
     },
     "react-native-image-picker": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/react-native-image-picker/-/react-native-image-picker-2.3.1.tgz",
-      "integrity": "sha512-c/a2h7/T7yBo5KlNQhcSn4xf4+6Li6LfJ59+GZT1ZzzWrj/6X8DiJ/TJBOlOZMC5tJriZKuRkWSsr74k6z+brw=="
+      "version": "2.3.4",
+      "resolved": "https://registry.npmjs.org/react-native-image-picker/-/react-native-image-picker-2.3.4.tgz",
+      "integrity": "sha512-4UHu+zOyDT570r5mIbjH6h1iMrKIq/qfsKiAVUEZwncVegh0usJiEYNyJw4CEVwNeehmye/ia5sLDsa+kzIE4g=="
     },
     "react-native-inappbrowser-reborn": {
       "version": "3.3.4",
@@ -15342,6 +15431,150 @@
         "camelcase": "^4.1.0"
       }
     },
+    "yargs-unparser": {
+      "version": "1.6.3",
+      "resolved": "https://registry.npmjs.org/yargs-unparser/-/yargs-unparser-1.6.3.tgz",
+      "integrity": "sha512-xI32EGCq5mJiSCsQaEPLljD+R3Hq/VG08YGoLTOqu/gHAtCa2S4qPMG20ol4TpKWgSU7j3KMZHvSirNPK0DSjA==",
+      "dev": true,
+      "requires": {
+        "camelcase": "^5.3.1",
+        "decamelize": "^1.2.0",
+        "flat": "^4.1.0",
+        "is-plain-obj": "^1.1.0",
+        "yargs": "^14.2.3"
+      },
+      "dependencies": {
+        "ansi-regex": {
+          "version": "4.1.0",
+          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.0.tgz",
+          "integrity": "sha512-1apePfXM1UOSqw0o9IiFAovVz9M5S1Dg+4TrDwfMewQ6p/rmMueb7tWZjQ1rx4Loy1ArBggoqGpfqqdI4rondg==",
+          "dev": true
+        },
+        "camelcase": {
+          "version": "5.3.1",
+          "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+          "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
+          "dev": true
+        },
+        "cliui": {
+          "version": "5.0.0",
+          "resolved": "https://registry.npmjs.org/cliui/-/cliui-5.0.0.tgz",
+          "integrity": "sha512-PYeGSEmmHM6zvoef2w8TPzlrnNpXIjTipYK780YswmIP9vjxmd6Y2a3CB2Ks6/AU8NHjZugXvo8w3oWM2qnwXA==",
+          "dev": true,
+          "requires": {
+            "string-width": "^3.1.0",
+            "strip-ansi": "^5.2.0",
+            "wrap-ansi": "^5.1.0"
+          }
+        },
+        "find-up": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/find-up/-/find-up-3.0.0.tgz",
+          "integrity": "sha512-1yD6RmLI1XBfxugvORwlck6f75tYL+iR0jqwsOrOxMZyGYqUuDhJ0l4AXdO1iX/FTs9cBAMEk1gWSEx1kSbylg==",
+          "dev": true,
+          "requires": {
+            "locate-path": "^3.0.0"
+          }
+        },
+        "get-caller-file": {
+          "version": "2.0.5",
+          "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+          "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
+          "dev": true
+        },
+        "locate-path": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-3.0.0.tgz",
+          "integrity": "sha512-7AO748wWnIhNqAuaty2ZWHkQHRSNfPVIsPIfwEOWO22AmaoVrWavlOcMR5nzTLNYvp36X220/maaRsrec1G65A==",
+          "dev": true,
+          "requires": {
+            "p-locate": "^3.0.0",
+            "path-exists": "^3.0.0"
+          }
+        },
+        "p-locate": {
+          "version": "3.0.0",
+          "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-3.0.0.tgz",
+          "integrity": "sha512-x+12w/To+4GFfgJhBEpiDcLozRJGegY+Ei7/z0tSLkMmxGZNybVMSfWj9aJn8Z5Fc7dBUNJOOVgPv2H7IwulSQ==",
+          "dev": true,
+          "requires": {
+            "p-limit": "^2.0.0"
+          }
+        },
+        "require-main-filename": {
+          "version": "2.0.0",
+          "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz",
+          "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
+          "dev": true
+        },
+        "string-width": {
+          "version": "3.1.0",
+          "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
+          "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
+          "dev": true,
+          "requires": {
+            "emoji-regex": "^7.0.1",
+            "is-fullwidth-code-point": "^2.0.0",
+            "strip-ansi": "^5.1.0"
+          }
+        },
+        "strip-ansi": {
+          "version": "5.2.0",
+          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
+          "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
+          "dev": true,
+          "requires": {
+            "ansi-regex": "^4.1.0"
+          }
+        },
+        "wrap-ansi": {
+          "version": "5.1.0",
+          "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-5.1.0.tgz",
+          "integrity": "sha512-QC1/iN/2/RPVJ5jYK8BGttj5z83LmSKmvbvrXPNCLZSEb32KKVDJDl/MOt2N01qU2H/FkzEa9PKto1BqDjtd7Q==",
+          "dev": true,
+          "requires": {
+            "ansi-styles": "^3.2.0",
+            "string-width": "^3.0.0",
+            "strip-ansi": "^5.0.0"
+          }
+        },
+        "y18n": {
+          "version": "4.0.0",
+          "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.0.tgz",
+          "integrity": "sha512-r9S/ZyXu/Xu9q1tYlpsLIsa3EeLXXk0VwlxqTcFRfg9EhMW+17kbt9G0NrgCmhGb5vT2hyhJZLfDGx+7+5Uj/w==",
+          "dev": true
+        },
+        "yargs": {
+          "version": "14.2.3",
+          "resolved": "https://registry.npmjs.org/yargs/-/yargs-14.2.3.tgz",
+          "integrity": "sha512-ZbotRWhF+lkjijC/VhmOT9wSgyBQ7+zr13+YLkhfsSiTriYsMzkTUFP18pFhWwBeMa5gUc1MzbhrO6/VB7c9Xg==",
+          "dev": true,
+          "requires": {
+            "cliui": "^5.0.0",
+            "decamelize": "^1.2.0",
+            "find-up": "^3.0.0",
+            "get-caller-file": "^2.0.1",
+            "require-directory": "^2.1.1",
+            "require-main-filename": "^2.0.0",
+            "set-blocking": "^2.0.0",
+            "string-width": "^3.0.0",
+            "which-module": "^2.0.0",
+            "y18n": "^4.0.0",
+            "yargs-parser": "^15.0.1"
+          }
+        },
+        "yargs-parser": {
+          "version": "15.0.1",
+          "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-15.0.1.tgz",
+          "integrity": "sha512-0OAMV2mAZQrs3FkNpDQcBk1x5HXb8X4twADss4S0Iuk+2dGnLOE/fRHrsYm542GduMveyA77OF4wrNJuanRCWw==",
+          "dev": true,
+          "requires": {
+            "camelcase": "^5.0.0",
+            "decamelize": "^1.2.0"
+          }
+        }
+      }
+    },
     "yazl": {
       "version": "2.5.1",
       "resolved": "https://registry.npmjs.org/yazl/-/yazl-2.5.1.tgz",
diff --git a/package.json b/package.json
index 127855e..83e42e5 100644
--- a/package.json
+++ b/package.json
@@ -1,17 +1,19 @@
 {
   "name": "native-template",
-  "version": "5.0.2",
+  "version": "5.1.10",
+  "mendix": {
+    "templateVersion": "5.1.10"
+  },
   "private": true,
   "scripts": {
-    "start": "node node_modules/react-native/local-cli/cli.js start",
-    "postinstall": "npx jetify",
-    "test": "jest"
+    "postinstall": "patch-package && jetify",
+    "configure": "native-mobile-toolkit configure --config-path='./config.json' --verbose"
   },
   "dependencies": {
     "@react-native-community/art": "1.2.0",
     "@react-native-community/async-storage": "1.8.1",
     "@react-native-community/cameraroll": "1.4.0",
-    "@react-native-community/datetimepicker": "2.3.0",
+    "@react-native-community/datetimepicker": "3.0.4",
     "@react-native-community/geolocation": "2.0.2",
     "@react-native-community/masked-view": "0.1.7",
     "@react-native-community/netinfo": "5.6.2",
@@ -28,7 +30,7 @@
     "react-native-firebase": "5.6.0",
     "react-native-geocoder": "0.5.0",
     "react-native-gesture-handler": "1.6.0",
-    "react-native-image-picker": "2.3.1",
+    "react-native-image-picker": "2.3.4",
     "react-native-inappbrowser-reborn": "3.3.4",
     "react-native-localize": "1.3.4",
     "react-native-maps": "0.27.0",
@@ -47,11 +49,13 @@
   "devDependencies": {
     "@babel/core": "^7.5.4",
     "@babel/runtime": "^7.5.4",
+    "@mendix/native-mobile-toolkit": "latest",
     "babel-jest": "^25.2.6",
-    "detox": "16.9.2",
+    "detox": "17.6.1",
     "jest": "^25.2.7",
     "jetifier": "^1.6.3",
     "metro-react-native-babel-preset": "^0.58.0",
+    "patch-package": "^6.2.2",
     "react-test-renderer": "~16.9.0"
   },
   "jest": {
diff --git a/patches/react-native+0.61.5.patch b/patches/react-native+0.61.5.patch
new file mode 100644
index 0000000..0f6a55c
--- /dev/null
+++ b/patches/react-native+0.61.5.patch
@@ -0,0 +1,15 @@
+diff --git a/node_modules/react-native/Libraries/Image/RCTUIImageViewAnimated.m b/node_modules/react-native/Libraries/Image/RCTUIImageViewAnimated.m
+index 01aa75f..d40ea37 100644
+--- a/node_modules/react-native/Libraries/Image/RCTUIImageViewAnimated.m
++++ b/node_modules/react-native/Libraries/Image/RCTUIImageViewAnimated.m
+@@ -266,6 +266,10 @@ - (void)displayDidRefresh:(CADisplayLink *)displayLink
+ 
+ - (void)displayLayer:(CALayer *)layer
+ {
++  if (!_currentFrame) {
++    _currentFrame = self.image;
++  }
++
+   if (_currentFrame) {
+     layer.contentsScale = self.animatedImageScale;
+     layer.contents = (__bridge id)_currentFrame.CGImage;
diff --git a/patches/react-native-firebase+5.6.0.patch b/patches/react-native-firebase+5.6.0.patch
new file mode 100644
index 0000000..addcda4
--- /dev/null
+++ b/patches/react-native-firebase+5.6.0.patch
@@ -0,0 +1,107 @@
+diff --git a/node_modules/react-native-firebase/android/src/main/java/io/invertase/firebase/RNFirebaseModule.java b/node_modules/react-native-firebase/android/src/main/java/io/invertase/firebase/RNFirebaseModule.java
+index 24f472e..085f926 100644
+--- a/node_modules/react-native-firebase/android/src/main/java/io/invertase/firebase/RNFirebaseModule.java
++++ b/node_modules/react-native-firebase/android/src/main/java/io/invertase/firebase/RNFirebaseModule.java
+@@ -155,24 +155,33 @@ public class RNFirebaseModule extends ReactContextBaseJavaModule {
+   public Map<String, Object> getConstants() {
+     Map<String, Object> constants = new HashMap<>();
+     List<Map<String, Object>> appMapsList = new ArrayList<>();
+-    List<FirebaseApp> firebaseAppList = FirebaseApp.getApps(getReactApplicationContext());
+-
+-    // TODO no way to get client id currently from app options - firebase sdk issue
+-    for (FirebaseApp app : firebaseAppList) {
+-      String appName = app.getName();
+-      FirebaseOptions appOptions = app.getOptions();
+-      Map<String, Object> appProps = new HashMap<>();
+-
+-      appProps.put("name", appName);
+-      appProps.put("apiKey", appOptions.getApiKey());
+-      appProps.put("appId", appOptions.getApplicationId());
+-      appProps.put("projectId", appOptions.getProjectId());
+-      appProps.put("projectId", appOptions.getProjectId());
+-      appProps.put("databaseURL", appOptions.getDatabaseUrl());
+-      appProps.put("messagingSenderId", appOptions.getGcmSenderId());
+-      appProps.put("storageBucket", appOptions.getStorageBucket());
+-
+-      appMapsList.add(appProps);
++
++    try {
++      List<FirebaseApp> firebaseAppList = FirebaseApp.getApps(getReactApplicationContext());
++
++      // TODO no way to get client id currently from app options - firebase sdk issue
++      for (FirebaseApp app : firebaseAppList) {
++        String appName = app.getName();
++        FirebaseOptions appOptions = app.getOptions();
++        Map<String, Object> appProps = new HashMap<>();
++
++        appProps.put("name", appName);
++        appProps.put("apiKey", appOptions.getApiKey());
++        appProps.put("appId", appOptions.getApplicationId());
++        appProps.put("projectId", appOptions.getProjectId());
++        appProps.put("projectId", appOptions.getProjectId());
++        appProps.put("databaseURL", appOptions.getDatabaseUrl());
++        appProps.put("messagingSenderId", appOptions.getGcmSenderId());
++        appProps.put("storageBucket", appOptions.getStorageBucket());
++
++        appMapsList.add(appProps);
++      }
++    } catch (Exception e) {
++      Log.e("RNFirebaseModule", "Firebase app not found. Did you enable the Firebase capability?");
++      Log.e("RNFirebaseModule", e.getLocalizedMessage());
++    } catch (NoClassDefFoundError e) {
++      Log.e("RNFirebaseModule", "Firebase app not found. Did you enable the Firebase capability?");
++      Log.e("RNFirebaseModule", e.getLocalizedMessage());
+     }
+ 
+     constants.put("apps", appMapsList);
+diff --git a/node_modules/react-native-firebase/ios/RNFirebase/messaging/RNFirebaseMessaging.m b/node_modules/react-native-firebase/ios/RNFirebase/messaging/RNFirebaseMessaging.m
+index 90fdb1d..92ac092 100644
+--- a/node_modules/react-native-firebase/ios/RNFirebase/messaging/RNFirebaseMessaging.m
++++ b/node_modules/react-native-firebase/ios/RNFirebase/messaging/RNFirebaseMessaging.m
+@@ -187,8 +187,10 @@ - (void)messaging:(nonnull FIRMessaging *)messaging
+ }
+ 
+ RCT_EXPORT_METHOD(registerForRemoteNotifications:(RCTPromiseResolveBlock)resolve rejecter:(RCTPromiseRejectBlock)reject) {
+-    [RCTSharedApplication() registerForRemoteNotifications];
+-    resolve(nil);
++    dispatch_async(dispatch_get_main_queue(), ^{
++        [RCTSharedApplication() registerForRemoteNotifications];
++        resolve(nil);
++    });
+ }
+ 
+ // Non Web SDK methods
+diff --git a/node_modules/react-native-firebase/ios/RNFirebase/notifications/RNFirebaseNotifications.m b/node_modules/react-native-firebase/ios/RNFirebase/notifications/RNFirebaseNotifications.m
+index d3aa1e3..b35e7c2 100644
+--- a/node_modules/react-native-firebase/ios/RNFirebase/notifications/RNFirebaseNotifications.m
++++ b/node_modules/react-native-firebase/ios/RNFirebase/notifications/RNFirebaseNotifications.m
+@@ -102,17 +102,19 @@ - (void)didReceiveLocalNotification:(nonnull UILocalNotification *)localNotifica
+ 
+ RCT_EXPORT_METHOD(complete:(NSString*)handlerKey fetchResult:(UIBackgroundFetchResult)fetchResult) {
+     if (handlerKey != nil) {
+-        void (^fetchCompletionHandler)(UIBackgroundFetchResult) = fetchCompletionHandlers[handlerKey];
+-        if (fetchCompletionHandler != nil) {
+-            fetchCompletionHandlers[handlerKey] = nil;
+-            fetchCompletionHandler(fetchResult);
+-        } else {
+-            void(^completionHandler)(void) = completionHandlers[handlerKey];
+-            if (completionHandler != nil) {
+-                completionHandlers[handlerKey] = nil;
+-                completionHandler();
++        dispatch_async(dispatch_get_main_queue(), ^{
++            void (^fetchCompletionHandler)(UIBackgroundFetchResult) = fetchCompletionHandlers[handlerKey];
++            if (fetchCompletionHandler != nil) {
++                fetchCompletionHandlers[handlerKey] = nil;
++                fetchCompletionHandler(fetchResult);
++            } else {
++                void(^completionHandler)(void) = completionHandlers[handlerKey];
++                if (completionHandler != nil) {
++                    completionHandlers[handlerKey] = nil;
++                    completionHandler();
++                }
+             }
+-        }
++        });
+     }
+ }
+ 
diff --git a/patches/react-native-image-picker+2.3.4.patch b/patches/react-native-image-picker+2.3.4.patch
new file mode 100644
index 0000000..e05f069
--- /dev/null
+++ b/patches/react-native-image-picker+2.3.4.patch
@@ -0,0 +1,16 @@
+diff --git a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/MediaUtils.java b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/MediaUtils.java
+index aa7641c..a12f055 100644
+--- a/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/MediaUtils.java
++++ b/node_modules/react-native-image-picker/android/src/main/java/com/imagepicker/utils/MediaUtils.java
+@@ -216,6 +216,11 @@ public class MediaUtils
+             scaledPhoto.recycle();
+             scaledPhoto = null;
+         }
++        if (imageConfig.original.getAbsolutePath() != null)
++        {
++            new File(imageConfig.original.getAbsolutePath()).delete();
++        }
++
+         return result;
+     }
+ 
diff --git a/react-native.config.js b/react-native.config.js
index 67421b6..e103df2 100644
--- a/react-native.config.js
+++ b/react-native.config.js
@@ -1,28 +1,23 @@
 module.exports = {
     dependencies: {
-        'react-native-firebase': {
+        'react-native-code-push': {
             platforms: {
                 // disable only on Android as we require some conditional setup
                 android: null,
             },
         },
-        'react-native-camera': {
+        'react-native-splash-screen': {
             platforms: {
-                // disable only on iOS as we require some conditional setup
+                android: null,
                 ios: null,
             },
         },
-        'react-native-code-push': {
+        'react-native-video': {
             platforms: {
-                // disable only on Android as we require some conditional setup
-                android: null,
+              android: {
+                sourceDir: '../node_modules/react-native-video/android-exoplayer',
+              },
             },
         },
-        'react-native-splash-screen': {
-            platforms: {
-                android: null,
-                ios: null,
-            },
-        }
     },
 };
